{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "18952e83-d377-4524-b58c-eda146b86f68"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"0f84df7b-b492-4d83-9db8-34e150a51c00": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "GLOBAL",
										"1": "United Kingdom (ex NI)",
										"2": "England",
										"3": "",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "United Kingdom (ex NI)",
										"2": "Scotland",
										"3": "",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "United Kingdom (ex NI)",
										"2": "Wales",
										"3": "",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "United Kingdom (ex NI)",
										"2": "Channel Islands",
										"3": "Guernsey",
										"4": "",
										"5": "",
										"6": "",
										"7": "GG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "United Kingdom (ex NI)",
										"2": "Channel Islands",
										"3": "Jersey",
										"4": "",
										"5": "",
										"6": "",
										"7": "JE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "United Kingdom (ex NI)",
										"2": "Isle of Man",
										"3": "",
										"4": "",
										"5": "",
										"6": "",
										"7": "UK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "ROI & NI",
										"3": "Republic of Ireland",
										"4": "",
										"5": "",
										"6": "",
										"7": "IE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "ROI & NI",
										"3": "Northern Ireland",
										"4": "",
										"5": "",
										"6": "",
										"7": "IE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Poland, Ukraine & Baltics",
										"4": "Poland",
										"5": "",
										"6": "",
										"7": "PL",
										"8": "171"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Poland, Ukraine & Baltics",
										"4": "Ukraine",
										"5": "",
										"6": "",
										"7": "UA",
										"8": "223"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Poland, Ukraine & Baltics",
										"4": "Lithuania",
										"5": "",
										"6": "",
										"7": "LT",
										"8": "127"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Poland, Ukraine & Baltics",
										"4": "Latvia",
										"5": "",
										"6": "",
										"7": "LV",
										"8": "121"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Poland, Ukraine & Baltics",
										"4": "Estonia",
										"5": "",
										"6": "",
										"7": "EE",
										"8": "71"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Czech Republic",
										"5": "",
										"6": "",
										"7": "CZ",
										"8": "61"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Slovakia",
										"5": "",
										"6": "",
										"7": "SK",
										"8": "194"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Germany",
										"5": "",
										"6": "",
										"7": "DE",
										"8": "83"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Hungary",
										"5": "",
										"6": "",
										"7": "HU",
										"8": "98"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Netherlands",
										"5": "",
										"6": "",
										"7": "NL",
										"8": "155"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Luxembourg",
										"5": "",
										"6": "",
										"7": "LU",
										"8": "128"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Switzerland",
										"5": "",
										"6": "",
										"7": "CH",
										"8": "206"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Croatia",
										"5": "",
										"6": "",
										"7": "HR",
										"8": "57"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Serbia",
										"5": "",
										"6": "",
										"7": "RS",
										"8": "189"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Spain",
										"5": "Canary Islands",
										"6": "",
										"7": "ES",
										"8": "200"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Spain",
										"5": "Spain (ex CI)",
										"6": "",
										"7": "ES",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "France",
										"5": "",
										"6": "",
										"7": "FR",
										"8": "78"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Italy",
										"5": "",
										"6": "",
										"7": "IT",
										"8": "107"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Belgium",
										"5": "",
										"6": "",
										"7": "BE",
										"8": "21"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Gibraltar",
										"5": "",
										"6": "",
										"7": "GI",
										"8": "85"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Austria",
										"5": "",
										"6": "",
										"7": "AT",
										"8": "14"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Western & Central Europe",
										"4": "Portugal",
										"5": "",
										"6": "",
										"7": "PT",
										"8": "172"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Cyprus",
										"5": "",
										"6": "",
										"7": "CY",
										"8": "60"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Romania",
										"5": "",
										"6": "",
										"7": "RO",
										"8": "176"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Malta",
										"5": "",
										"6": "",
										"7": "MT",
										"8": "135"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Greece",
										"5": "",
										"6": "",
										"7": "GR",
										"8": "86"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Bulgaria",
										"5": "",
										"6": "",
										"7": "BG",
										"8": "33"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Albania",
										"5": "",
										"6": "",
										"7": "AL",
										"8": "2"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "Moldova, Republic of",
										"5": "",
										"6": "",
										"7": "MD",
										"8": "143"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Southern Europe",
										"4": "North Macedonia",
										"5": "",
										"6": "",
										"7": "MK",
										"8": "161"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Slovenia",
										"5": "",
										"6": "",
										"7": "SI",
										"8": "195"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Bosnia and Herzegovina",
										"5": "",
										"6": "",
										"7": "BA",
										"8": "29"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Sweden",
										"5": "",
										"6": "",
										"7": "SE",
										"8": "205"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Denmark",
										"5": "",
										"6": "",
										"7": "DK",
										"8": "62"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Kosovo",
										"5": "",
										"6": "",
										"7": "XK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Norway",
										"5": "",
										"6": "",
										"7": "NO",
										"8": "162"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Finland",
										"5": "",
										"6": "",
										"7": "FI",
										"8": "77"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Montenegro",
										"5": "",
										"6": "",
										"7": "ME",
										"8": "146"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Iceland",
										"5": "",
										"6": "",
										"7": "IS",
										"8": "99"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "British Forces Post Office",
										"5": "",
										"6": "",
										"7": "XP",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Monaco",
										"5": "",
										"6": "",
										"7": "MC",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Liechtenstein",
										"5": "",
										"6": "",
										"7": "LI",
										"8": "144"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Andorra",
										"5": "",
										"6": "",
										"7": "AD",
										"8": "5"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "San Marino",
										"5": "",
										"6": "",
										"7": "SM",
										"8": "184"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Svalbard and Jan Mayen",
										"5": "",
										"6": "",
										"7": "SJ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Holy See (Vatican City State)",
										"5": "",
										"6": "",
										"7": "VA",
										"8": "95"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Aland Islands",
										"5": "",
										"6": "",
										"7": "AX",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Faroe Islands",
										"5": "",
										"6": "",
										"7": "FO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Europe",
										"3": "Europe (Other)",
										"4": "Greenland",
										"5": "",
										"6": "",
										"7": "GL",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "North America",
										"4": "Canada",
										"5": "",
										"6": "",
										"7": "CA",
										"8": "38"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "North America",
										"4": "USA",
										"5": "",
										"6": "",
										"7": "US",
										"8": "228"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Trinidad and Tobago",
										"6": "",
										"7": "TT",
										"8": "216"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Guyana",
										"6": "",
										"7": "GY",
										"8": "93"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Jamaica",
										"6": "West Indies",
										"7": "JM",
										"8": "108"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Jamaica",
										"6": "Jamaica (ex WI)",
										"7": "JM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Barbados",
										"6": "",
										"7": "BB",
										"8": "19"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Saint Lucia",
										"6": "",
										"7": "LC",
										"8": "181"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Cayman Islands",
										"6": "",
										"7": "KY",
										"8": "41"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (major)",
										"5": "Bermuda",
										"6": "",
										"7": "BM",
										"8": "24"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Grenada",
										"6": "",
										"7": "GD",
										"8": "87"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Antigua and Barbuda",
										"6": "",
										"7": "AG",
										"8": "8"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Saint Vincent and the Grenadines",
										"6": "",
										"7": "VC",
										"8": "183"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Suriname",
										"6": "",
										"7": "SR",
										"8": "204"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Virgin Islands, British",
										"6": "",
										"7": "VG",
										"8": "233"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Saint Kitts and Nevis",
										"6": "",
										"7": "KN",
										"8": "180"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Dominica",
										"6": "",
										"7": "DM",
										"8": "64"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Bahamas",
										"6": "",
										"7": "BS",
										"8": "16"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Belize",
										"6": "",
										"7": "BZ",
										"8": "22"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Sint Maarten (Dutch part)",
										"6": "Netherlands Antilles",
										"7": "AN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Sint Maarten (Dutch part)",
										"6": "Sint Maarten (ex NA)",
										"7": "AN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Sint Maarten (Dutch part)",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Turks and Caicos Islands",
										"6": "",
										"7": "TC",
										"8": "220"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Anguilla",
										"6": "",
										"7": "AI",
										"8": "7"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Montserrat",
										"6": "",
										"7": "MS",
										"8": "147"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Dominican Republic",
										"6": "",
										"7": "DO",
										"8": "65"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Curacao",
										"6": "",
										"7": "CW",
										"8": "59"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (minor)",
										"5": "Aruba",
										"6": "",
										"7": "AW",
										"8": "11"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Virgin Islands, U.S.",
										"6": "",
										"7": "VI",
										"8": "234"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Cuba",
										"6": "",
										"7": "CU",
										"8": "58"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Martinique",
										"6": "",
										"7": "MQ",
										"8": "137"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Bonaire, Sint Eustatius and Saba",
										"6": "",
										"7": "BQ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "French Guiana",
										"6": "",
										"7": "GF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Guadeloupe",
										"6": "",
										"7": "GP",
										"8": "88"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Haiti",
										"6": "",
										"7": "HT",
										"8": "94"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Puerto Rico",
										"6": "",
										"7": "PR",
										"8": "173"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Saint Barthelemy",
										"6": "",
										"7": "BL",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Caribbean (other)",
										"5": "Saint Martin (French part)",
										"6": "",
										"7": "MF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Brazil",
										"6": "",
										"7": "BR",
										"8": "31"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Colombia",
										"6": "",
										"7": "CO",
										"8": "50"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Chile",
										"6": "",
										"7": "CL",
										"8": "45"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Mexico",
										"6": "",
										"7": "MX",
										"8": "141"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Peru",
										"6": "",
										"7": "PE",
										"8": "169"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Argentina",
										"6": "",
										"7": "AR",
										"8": "9"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Ecuador",
										"6": "",
										"7": "EC",
										"8": "66"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Venezuela",
										"6": "",
										"7": "VE",
										"8": "231"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Guatemala",
										"6": "",
										"7": "GT",
										"8": "90"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Honduras",
										"6": "",
										"7": "HN",
										"8": "96"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Nicaragua",
										"6": "",
										"7": "NI",
										"8": "158"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Bolivia",
										"6": "",
										"7": "BO",
										"8": "27"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Costa Rica",
										"6": "",
										"7": "CR",
										"8": "55"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "El Salvador",
										"6": "",
										"7": "SV",
										"8": "68"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Panama",
										"6": "",
										"7": "PA",
										"8": "166"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Paraguay",
										"6": "",
										"7": "PY",
										"8": "168"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Caribbean and Latin America",
										"4": "Latin America",
										"5": "Uruguay",
										"6": "",
										"7": "UY",
										"8": "227"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Americas (Other)",
										"4": "Falkland Islands",
										"5": "",
										"6": "",
										"7": "FK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Americas (Other)",
										"4": "Saint Pierre and Miquelon",
										"5": "",
										"6": "",
										"7": "PM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Americas (Other)",
										"4": "South Georgia and the South Sandwich Islands",
										"5": "",
										"6": "",
										"7": "GS",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Americas",
										"3": "Americas (Other)",
										"4": "United States Minor Outlying Islands",
										"5": "",
										"6": "",
										"7": "UM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Russia & Belarus",
										"4": "Russian Federation",
										"5": "",
										"6": "",
										"7": "RU",
										"8": "177"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Russia & Belarus",
										"4": "Belarus",
										"5": "",
										"6": "",
										"7": "BY",
										"8": "20"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Central Asia",
										"4": "Kazakhstan",
										"5": "",
										"6": "",
										"7": "KZ",
										"8": "112"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Central Asia",
										"4": "Uzbekistan",
										"5": "",
										"6": "",
										"7": "UZ",
										"8": "229"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Central Asia",
										"4": "Kyrgyzstan",
										"5": "",
										"6": "",
										"7": "KG",
										"8": "119"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Central Asia",
										"4": "Tajikistan",
										"5": "",
										"6": "",
										"7": "TJ",
										"8": "209"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Central Asia",
										"4": "Turkmenistan",
										"5": "",
										"6": "",
										"7": "TM",
										"8": "219"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Turkey, Azerbaijan & RMMs",
										"4": "Turkey",
										"5": "",
										"6": "",
										"7": "TR",
										"8": "218"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Turkey, Azerbaijan & RMMs",
										"4": "Azerbaijan",
										"5": "",
										"6": "",
										"7": "AZ",
										"8": "15"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Turkey, Azerbaijan & RMMs",
										"4": "Afghanistan",
										"5": "",
										"6": "",
										"7": "AF",
										"8": "1"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Eurasia (Other)",
										"4": "Georgia",
										"5": "",
										"6": "",
										"7": "GE",
										"8": "82"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Eurasia (Other)",
										"4": "Mongolia",
										"5": "",
										"6": "",
										"7": "MN",
										"8": "145"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Eurasia",
										"3": "Eurasia (Other)",
										"4": "Armenia",
										"5": "",
										"6": "",
										"7": "AM",
										"8": "10"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "United Arab Emirates",
										"5": "",
										"6": "",
										"7": "AE",
										"8": "224"
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Saudi Arabia",
										"5": "",
										"6": "",
										"7": "SA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Oman",
										"5": "",
										"6": "",
										"7": "OM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Bahrain",
										"5": "",
										"6": "",
										"7": "BH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Qatar",
										"5": "",
										"6": "",
										"7": "QA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Iran, Islamic Republic of",
										"5": "",
										"6": "",
										"7": "IR",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Kuwait",
										"5": "",
										"6": "",
										"7": "KW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Egypt",
										"5": "",
										"6": "",
										"7": "EG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Iraq",
										"5": "",
										"6": "",
										"7": "IQ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Jordan",
										"5": "",
										"6": "",
										"7": "JO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (active)",
										"4": "Lebanon",
										"5": "",
										"6": "",
										"7": "LB",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (other)",
										"4": "Palestinian Territory,Occupied",
										"5": "",
										"6": "",
										"7": "PS",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (other)",
										"4": "Israel",
										"5": "",
										"6": "",
										"7": "IL",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (other)",
										"4": "Yemen",
										"5": "",
										"6": "",
										"7": "YE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "EEMA",
										"2": "Middle East",
										"3": "Middle East (other)",
										"4": "Syrian Arab Republic",
										"5": "",
										"6": "",
										"7": "SY",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Maritime South East Asia",
										"3": "Malaysia",
										"4": "",
										"5": "",
										"6": "",
										"7": "MY",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Maritime South East Asia",
										"3": "Indonesia",
										"4": "",
										"5": "",
										"6": "",
										"7": "ID",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Maritime South East Asia",
										"3": "Philippines",
										"4": "",
										"5": "",
										"6": "",
										"7": "PH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Maritime South East Asia",
										"3": "Brunei Darussalam",
										"4": "",
										"5": "",
										"6": "",
										"7": "BN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Singapore",
										"4": "",
										"5": "",
										"6": "",
										"7": "SG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "ANZ",
										"4": "Australia",
										"5": "",
										"6": "",
										"7": "AU",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "ANZ",
										"4": "New Zealand",
										"5": "",
										"6": "",
										"7": "NZ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Oceania",
										"4": "Fiji",
										"5": "",
										"6": "",
										"7": "FJ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Oceania",
										"4": "New Caledonia",
										"5": "",
										"6": "",
										"7": "NC",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Oceania",
										"4": "Papua New Guinea",
										"5": "",
										"6": "",
										"7": "PG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Oceania",
										"4": "Solomon Islands",
										"5": "",
										"6": "",
										"7": "SB",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Oceania",
										"4": "Tonga",
										"5": "",
										"6": "",
										"7": "TO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Singapore, ANZ & Oceania",
										"3": "Oceania",
										"4": "Tuvalu",
										"5": "",
										"6": "",
										"7": "TV",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Pakistan",
										"3": "Pakistan (Central)",
										"4": "Faisalabad",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Pakistan",
										"3": "Pakistan (Central)",
										"4": "Lahore",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Pakistan",
										"3": "Pakistan (Central)",
										"4": "Multan",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Pakistan",
										"3": "Pakistan (North)",
										"4": "Islamabad",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Pakistan",
										"3": "Pakistan (North)",
										"4": "Peshawar",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Pakistan",
										"3": "Pakistan (South)",
										"4": "Karachi",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Mainland South East Asia",
										"3": "Viet Nam",
										"4": "",
										"5": "",
										"6": "",
										"7": "VN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Mainland South East Asia",
										"3": "Cambodia & Lao",
										"4": "Cambodia",
										"5": "",
										"6": "",
										"7": "KH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Mainland South East Asia",
										"3": "Cambodia & Lao",
										"4": "Lao People's Democratic Republic",
										"5": "",
										"6": "",
										"7": "LA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Mainland South East Asia",
										"3": "Myanmar & Thailand",
										"4": "Myanmar",
										"5": "",
										"6": "",
										"7": "MM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Mainland South East Asia",
										"3": "Myanmar & Thailand",
										"4": "Thailand",
										"5": "",
										"6": "",
										"7": "TH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "South Asia",
										"3": "Bangladesh",
										"4": "",
										"5": "",
										"6": "",
										"7": "BD",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "South Asia",
										"3": "Bhutan",
										"4": "",
										"5": "",
										"6": "",
										"7": "BT",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "South Asia",
										"3": "Sri Lanka",
										"4": "",
										"5": "",
										"6": "",
										"7": "LK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "South Asia",
										"3": "Maldives",
										"4": "",
										"5": "",
										"6": "",
										"7": "MV",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "South Asia",
										"3": "Nepal",
										"4": "",
										"5": "",
										"6": "",
										"7": "NP",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "New Market Development (Asia Pacific)",
										"3": "Japan",
										"4": "",
										"5": "",
										"6": "",
										"7": "JP",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "New Market Development (Asia Pacific)",
										"3": "Korea, Republic of",
										"4": "",
										"5": "",
										"6": "",
										"7": "KR",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "American Samoa",
										"4": "",
										"5": "",
										"6": "",
										"7": "AS",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Antarctica",
										"4": "",
										"5": "",
										"6": "",
										"7": "AQ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Bouvet Island",
										"4": "",
										"5": "",
										"6": "",
										"7": "BV",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "British Indian Ocean Territory",
										"4": "",
										"5": "",
										"6": "",
										"7": "IO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Christmas Island",
										"4": "",
										"5": "",
										"6": "",
										"7": "CX",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Cocos (Keeling) Islands",
										"4": "",
										"5": "",
										"6": "",
										"7": "CC",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Cook Islands",
										"4": "",
										"5": "",
										"6": "",
										"7": "CK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "French Polynesia",
										"4": "",
										"5": "",
										"6": "",
										"7": "PF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "French Southern Territories",
										"4": "",
										"5": "",
										"6": "",
										"7": "TF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Guam",
										"4": "",
										"5": "",
										"6": "",
										"7": "GU",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Heard Island and McDonald Islands",
										"4": "",
										"5": "",
										"6": "",
										"7": "HM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Kiribati",
										"4": "",
										"5": "",
										"6": "",
										"7": "KI",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Korea, Democratic People's Republic of",
										"4": "",
										"5": "",
										"6": "",
										"7": "KP",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Marshall Islands",
										"4": "",
										"5": "",
										"6": "",
										"7": "MH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Micronesia, Federated States of",
										"4": "Yap",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Micronesia, Federated States of",
										"4": "Micronesia, Federated States of (ex Yap)",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Nauru",
										"4": "",
										"5": "",
										"6": "",
										"7": "Nr",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Norfolk Island",
										"4": "",
										"5": "",
										"6": "",
										"7": "NF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Northern Mariana Islands",
										"4": "",
										"5": "",
										"6": "",
										"7": "MP",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Niue",
										"4": "",
										"5": "",
										"6": "",
										"7": "NU",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Palau",
										"4": "",
										"5": "",
										"6": "",
										"7": "PW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Pitcairn",
										"4": "",
										"5": "",
										"6": "",
										"7": "PN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Samoa",
										"4": "",
										"5": "",
										"6": "",
										"7": "WS",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Timor-Leste",
										"4": "",
										"5": "",
										"6": "",
										"7": "TL",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Tokelau",
										"4": "",
										"5": "",
										"6": "",
										"7": "TK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Vanuatu",
										"4": "",
										"5": "",
										"6": "",
										"7": "VU",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Asia Pacific",
										"2": "Other (Asia Pacific)",
										"3": "Wallis and Futuna",
										"4": "",
										"5": "",
										"6": "",
										"7": "WF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Northern China",
										"4": "Beijing",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Northern China",
										"4": "Qingdao",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Northern China",
										"4": "Shenyang",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Central China",
										"4": "Chengdu",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Central China",
										"4": "Shanghai",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Central China",
										"4": "Wuhan",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Southern China",
										"4": "Changsha",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Southern China",
										"4": "Guangzhou",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Mainland China",
										"3": "Southern China",
										"4": "Shenzhen",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "HK & Macau SAR of China",
										"3": "Hong Kong SAR of China",
										"4": "",
										"5": "",
										"6": "",
										"7": "HK",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "HK & Macau SAR of China",
										"3": "Macau SAR of China",
										"4": "",
										"5": "",
										"6": "",
										"7": "MO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "China",
										"2": "Other (China)",
										"3": "Taiwan Region",
										"4": "",
										"5": "",
										"6": "",
										"7": "TW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "India",
										"2": "East, West, North and Central India",
										"3": "North & East India",
										"4": "North India",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "India",
										"2": "East, West, North and Central India",
										"3": "North & East India",
										"4": "East India",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "India",
										"2": "East, West, North and Central India",
										"3": "West & Central India",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "India",
										"2": "South India",
										"3": "South India1",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "India",
										"2": "South India",
										"3": "South India2",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Nigeria",
										"3": "Abuja",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Nigeria",
										"3": "Lagos",
										"4": "",
										"5": "",
										"6": "",
										"7": "",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Mauritius",
										"4": "",
										"5": "",
										"6": "",
										"7": "MU",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Madagascar",
										"4": "",
										"5": "",
										"6": "",
										"7": "MG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Seychelles",
										"4": "",
										"5": "",
										"6": "",
										"7": "SC",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Sudan",
										"4": "",
										"5": "",
										"6": "",
										"7": "SD",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Algeria",
										"4": "",
										"5": "",
										"6": "",
										"7": "DZ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Chad",
										"4": "",
										"5": "",
										"6": "",
										"7": "TD",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Libyan Arab Jamahiriya",
										"4": "",
										"5": "",
										"6": "",
										"7": "LY",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Mali",
										"4": "",
										"5": "",
										"6": "",
										"7": "ML",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Mauritania",
										"4": "",
										"5": "",
										"6": "",
										"7": "MR",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Morocco",
										"4": "",
										"5": "",
										"6": "",
										"7": "MA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Niger",
										"4": "",
										"5": "",
										"6": "",
										"7": "NE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Mauritius and New Markets",
										"3": "Western Sahara",
										"4": "",
										"5": "",
										"6": "",
										"7": "EH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Southern Africa  ",
										"3": "Botswana",
										"4": "",
										"5": "",
										"6": "",
										"7": "BW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Southern Africa  ",
										"3": "South Africa",
										"4": "",
										"5": "",
										"6": "",
										"7": "ZA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Southern Africa  ",
										"3": "Eswatini",
										"4": "",
										"5": "",
										"6": "",
										"7": "SZ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Southern Africa  ",
										"3": "Lesotho",
										"4": "",
										"5": "",
										"6": "",
										"7": "LS",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Southern Africa  ",
										"3": "Mozambique",
										"4": "",
										"5": "",
										"6": "",
										"7": "MZ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Southern Africa  ",
										"3": "Namibia",
										"4": "",
										"5": "",
										"6": "",
										"7": "NA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Ghana",
										"4": "",
										"5": "",
										"6": "",
										"7": "GH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Malawi",
										"4": "",
										"5": "",
										"6": "",
										"7": "MW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Zambia",
										"4": "",
										"5": "",
										"6": "",
										"7": "ZM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Zimbabwe",
										"4": "",
										"5": "",
										"6": "",
										"7": "ZW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Cameroon",
										"4": "",
										"5": "",
										"6": "",
										"7": "CM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Congo, The Democratic Republic of the",
										"4": "",
										"5": "",
										"6": "",
										"7": "CD",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Gambia",
										"4": "",
										"5": "",
										"6": "",
										"7": "GM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Liberia",
										"4": "",
										"5": "",
										"6": "",
										"7": "LR",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "West & Central Africa",
										"3": "Sierra Leone",
										"4": "",
										"5": "",
										"6": "",
										"7": "SL",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Kenya",
										"4": "",
										"5": "",
										"6": "",
										"7": "KE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Tanzania, United Republic of",
										"4": "",
										"5": "",
										"6": "",
										"7": "TZ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Uganda",
										"4": "",
										"5": "",
										"6": "",
										"7": "UG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Ethiopia",
										"4": "",
										"5": "",
										"6": "",
										"7": "ET",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Eritrea",
										"4": "",
										"5": "",
										"6": "",
										"7": "ER",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Rwanda",
										"4": "",
										"5": "",
										"6": "",
										"7": "RW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "Somalia",
										"4": "",
										"5": "",
										"6": "",
										"7": "SO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Eastern Africa",
										"3": "South Sudan",
										"4": "",
										"5": "",
										"6": "",
										"7": "SS",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Angola",
										"4": "",
										"5": "",
										"6": "",
										"7": "AO",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Benin",
										"4": "",
										"5": "",
										"6": "",
										"7": "BJ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Burkina Faso",
										"4": "",
										"5": "",
										"6": "",
										"7": "BF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Burundi",
										"4": "",
										"5": "",
										"6": "",
										"7": "BI",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Cape Verde",
										"4": "",
										"5": "",
										"6": "",
										"7": "CV",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Central African Republic",
										"4": "",
										"5": "",
										"6": "",
										"7": "CF",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Comoros",
										"4": "",
										"5": "",
										"6": "",
										"7": "KM",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Congo",
										"4": "",
										"5": "",
										"6": "",
										"7": "CG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Cote d'Ivoire",
										"4": "",
										"5": "",
										"6": "",
										"7": "CI",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Djibouti",
										"4": "",
										"5": "",
										"6": "",
										"7": "DJ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Equatorial Guinea",
										"4": "",
										"5": "",
										"6": "",
										"7": "GQ",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Gabon",
										"4": "",
										"5": "",
										"6": "",
										"7": "GA",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Guinea",
										"4": "",
										"5": "",
										"6": "",
										"7": "GN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Guinea-Bissau",
										"4": "",
										"5": "",
										"6": "",
										"7": "GW",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Mayotte",
										"4": "",
										"5": "",
										"6": "",
										"7": "YT",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Reunion",
										"4": "",
										"5": "",
										"6": "",
										"7": "RE",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Saint Helena",
										"4": "Ascension Islands",
										"5": "",
										"6": "",
										"7": "SH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Saint Helena",
										"4": "Saint Helena (ex AI)",
										"5": "",
										"6": "",
										"7": "SH",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Sao Tome and Principe",
										"4": "",
										"5": "",
										"6": "",
										"7": "ST",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Senegal",
										"4": "",
										"5": "",
										"6": "",
										"7": "SN",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Togo",
										"4": "",
										"5": "",
										"6": "",
										"7": "TG",
										"8": ""
									},
									{
										"0": "GLOBAL",
										"1": "Africa",
										"2": "Other (Africa)",
										"3": "Tunisia",
										"4": "",
										"5": "",
										"6": "",
										"7": "TN",
										"8": ""
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "L1",
										"type": "string"
									},
									{
										"key": "1",
										"name": "L2",
										"type": "string"
									},
									{
										"key": "2",
										"name": "L3",
										"type": "string"
									},
									{
										"key": "3",
										"name": "L4",
										"type": "string"
									},
									{
										"key": "4",
										"name": "L5",
										"type": "string"
									},
									{
										"key": "5",
										"name": "L6",
										"type": "string"
									},
									{
										"key": "6",
										"name": "L7",
										"type": "string"
									},
									{
										"key": "7",
										"name": "ISO",
										"type": "string"
									},
									{
										"key": "8",
										"name": "CountryID",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"1ae2f3aa-6512-40b2-824f-ffbc1e688fd7": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "-1",
										"1": "1900-01-01",
										"2": "1989-01-01",
										"3": "190001",
										"4": "Monday, January 1 1900",
										"5": "1900",
										"6": "Year 1900",
										"7": "1900-Q1",
										"8": "Quarter 1, 1900",
										"9": "01",
										"10": "January",
										"11": "January, 1900",
										"12": "01",
										"13": "Week 01, 1900",
										"14": "001",
										"15": "Day 001, 1900",
										"16": "01",
										"17": "Day 01",
										"18": "1",
										"19": "Day 1",
										"20": "Monday",
										"21": "1900, 01",
										"22": "Week 01, 1900",
										"23": "1900, 01",
										"24": "Month 01, 1900",
										"25": "1900, 1",
										"26": "Quarter 1, 1900",
										"27": "1900-H1",
										"28": "190001",
										"29": "1900",
										"30": "Fiscal Year 1900",
										"31": "1900-Q1",
										"32": "Fiscal Quarter 1, 1900",
										"33": "01",
										"34": "January, 1900",
										"35": "1900-H1",
										"36": ""
									},
									{
										"0": "Gregorian_2022-04-01",
										"1": "2022-04-01",
										"2": "2021-04-01",
										"3": "202204",
										"4": "Friday, April 1 2022",
										"5": "2022",
										"6": "Year 2022",
										"7": "2022-Q2",
										"8": "Quarter 2, 2022",
										"9": "04",
										"10": "April",
										"11": "April, 2022",
										"12": "13",
										"13": "Week 13, 2022",
										"14": "091",
										"15": "Day 091, 2022",
										"16": "01",
										"17": "Day 01",
										"18": "6",
										"19": "Day 6",
										"20": "Friday",
										"21": "2022, 13",
										"22": "Week 13, 2022",
										"23": "2022, 04",
										"24": "Month 04, 2022",
										"25": "2022, 2",
										"26": "Quarter 2, 2022",
										"27": "2022-H1",
										"28": "202203",
										"29": "2022",
										"30": "Fiscal Year 2022",
										"31": "2022-Q1",
										"32": "Fiscal Quarter 1, 2022",
										"33": "03",
										"34": "April, 2022",
										"35": "2022-H1",
										"36": "Gregorian"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "DateCode",
										"type": "string"
									},
									{
										"key": "1",
										"name": "Date",
										"type": "date"
									},
									{
										"key": "2",
										"name": "PreviousYearDate",
										"type": "date"
									},
									{
										"key": "3",
										"name": "CalendarPeriod",
										"type": "string"
									},
									{
										"key": "4",
										"name": "DateName",
										"type": "string"
									},
									{
										"key": "5",
										"name": "CalendarYear",
										"type": "string"
									},
									{
										"key": "6",
										"name": "CalendarYearName",
										"type": "string"
									},
									{
										"key": "7",
										"name": "CalendarQuarter",
										"type": "string"
									},
									{
										"key": "8",
										"name": "CalendarQuarterName",
										"type": "string"
									},
									{
										"key": "9",
										"name": "CalendarMonth",
										"type": "string"
									},
									{
										"key": "10",
										"name": "MonthShortName",
										"type": "string"
									},
									{
										"key": "11",
										"name": "CalendarMonthName",
										"type": "string"
									},
									{
										"key": "12",
										"name": "CalendarWeek",
										"type": "string"
									},
									{
										"key": "13",
										"name": "CalendarWeekName",
										"type": "string"
									},
									{
										"key": "14",
										"name": "CalendarDayOfYear",
										"type": "string"
									},
									{
										"key": "15",
										"name": "CalendarDayOfYearName",
										"type": "string"
									},
									{
										"key": "16",
										"name": "DayOfMonth",
										"type": "string"
									},
									{
										"key": "17",
										"name": "DayOfMonthName",
										"type": "string"
									},
									{
										"key": "18",
										"name": "DayOfWeek",
										"type": "string"
									},
									{
										"key": "19",
										"name": "DayOfWeekName",
										"type": "string"
									},
									{
										"key": "20",
										"name": "Weekday",
										"type": "string"
									},
									{
										"key": "21",
										"name": "CalendarWeekOfYear",
										"type": "string"
									},
									{
										"key": "22",
										"name": "CalendarWeekOfYearName",
										"type": "string"
									},
									{
										"key": "23",
										"name": "CalendarMonthOfYear",
										"type": "string"
									},
									{
										"key": "24",
										"name": "CalendarMonthOfYearName",
										"type": "string"
									},
									{
										"key": "25",
										"name": "CalendarQuarterOfYear",
										"type": "string"
									},
									{
										"key": "26",
										"name": "CalendarQuarterOfYearName",
										"type": "string"
									},
									{
										"key": "27",
										"name": "CalendarHalfYear",
										"type": "string"
									},
									{
										"key": "28",
										"name": "FiscalPeriod",
										"type": "string"
									},
									{
										"key": "29",
										"name": "FiscalYear",
										"type": "string"
									},
									{
										"key": "30",
										"name": "FiscalYearName",
										"type": "string"
									},
									{
										"key": "31",
										"name": "FiscalQuarter",
										"type": "string"
									},
									{
										"key": "32",
										"name": "FiscalQuarterName",
										"type": "string"
									},
									{
										"key": "33",
										"name": "FiscalMonth",
										"type": "string"
									},
									{
										"key": "34",
										"name": "FiscalMonthName",
										"type": "string"
									},
									{
										"key": "35",
										"name": "FiscalHalfYear",
										"type": "string"
									},
									{
										"key": "36",
										"name": "Calendar",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35c7c256-febc-4c53-82a5-71e8573a3c24/resourceGroups/rg-pmishra-training-001/providers/Microsoft.Synapse/workspaces/trainparmish/bigDataPools/Sparkpool",
				"name": "Sparkpool",
				"type": "Spark",
				"endpoint": "https://trainparmish.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\n",
					"import pandas as pd\n",
					"blob_account_name = \"strgpmishra\"\n",
					"blob_container_name = \"raw\"\n",
					"from pyspark.sql import SparkSession\n",
					"\n",
					"sc = SparkSession.builder.getOrCreate()\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
					"blob_sas_token = token_library.getConnectionString(\"AzureBlobStorage1\")\n",
					"\n",
					"spark.conf.set(\n",
					"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\n",
					"    blob_sas_token)\n",
					"df = spark.read.load('wasbs://raw@strgpmishra.blob.core.windows.net/Country_Rollup.csv', format='csv'\n",
					"## If header exists uncomment line below\n",
					", header=True\n",
					")\n",
					"df = df.na.fill(\"\")\n",
					"# Or using fillna\n",
					"df = df.fillna(\"\")\n",
					"display(df)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import to_date, date_add\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"from datetime import datetime, timedelta\r\n",
					"\r\n",
					"# Initialize SparkSession (assuming you have already done this; if not, uncomment the next two lines)\r\n",
					"# spark = SparkSession.builder \\\r\n",
					"#     .appName(\"Date Issue Fix\") \\\r\n",
					"#     .getOrCreate()\r\n",
					"\r\n",
					"# Corrected sample data as a list of tuples\r\n",
					"data = [(\"2023-03-31\",), (\"2022-03-31\",)]  \r\n",
					"\r\n",
					"# Define schema\r\n",
					"schema = StructType([ \r\n",
					"    StructField(\"FiscalPeriodEndDate\", StringType(), True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create DataFrame with the correct structure\r\n",
					"df = spark.createDataFrame(data, schema)\r\n",
					"df.createOrReplaceTempView(\"TempTable_FiscalPeriod\")\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM TempTable_FiscalPeriod\")\r\n",
					"df.show()\r\n",
					"\r\n",
					"# Using date_add for date arithmetic\r\n",
					"DF_StartEndDates = spark.sql(\"\"\"\r\n",
					"    SELECT \r\n",
					"      date_add(CAST(MIN(FiscalPeriodEndDate) AS DATE), 1) AS FiscalStartDate,  \r\n",
					"      date_add(CAST(MAX(FiscalPeriodEndDate) AS DATE), 1) AS FiscalEndDate\r\n",
					"    FROM TempTable_FiscalPeriod\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"DF_StartEndDates.show()\r\n",
					"\r\n",
					"#Create List from DF_StartEndDates\r\n",
					"DatesCollection = DF_StartEndDates.collect()\r\n",
					"\r\n",
					"#Generate Date Ranges from Start & End Dates \r\n",
					"def DimDate_PeriodInDaysDateRange(start_date, end_date):\r\n",
					"    for n in range(int((end_date - start_date).days)):\r\n",
					"        yield start_date + timedelta(n)\r\n",
					"\r\n",
					"#Initialize list to store dates between Start & End Date\r\n",
					"List_DimDatePeriodInDaysDates = []\r\n",
					"\r\n",
					"#Loop in DatesCollection and generate all days between Start & End Date\r\n",
					"for row in DatesCollection:\r\n",
					"    PeriodInDaysStartDate = row[\"FiscalStartDate\"]\r\n",
					"    PeriodInDaysEndDate =  row[\"FiscalEndDate\"]\r\n",
					"    for single_date in DimDate_PeriodInDaysDateRange(PeriodInDaysStartDate, PeriodInDaysEndDate):\r\n",
					"        #Append single days to Period In Days Dates List\r\n",
					"        List_DimDatePeriodInDaysDates.append(single_date.strftime(\"%Y-%m-%d\"))\r\n",
					"\r\n",
					"#Define the Dataframe from Period In Days Dates List\r\n",
					"DF_PeriodInDaysDates = spark.createDataFrame(List_DimDatePeriodInDaysDates, StringType())\r\n",
					"DF_PeriodInDaysDates.createOrReplaceTempView('FiscalDates')\r\n",
					"\r\n",
					"\r\n",
					"# Define HistoricalCalendar as \"Gregorian\" for the United Kingdom calendar\r\n",
					"HistoricalCalendar = \"Gregorian\"\r\n",
					"\r\n",
					"GenDates = spark.sql(f\"\"\"\r\n",
					"    SELECT \r\n",
					"        date_add(CAST(MIN(FiscalPeriodEndDate) AS DATE), 1) AS FiscalPeriodStartDate,\r\n",
					"        date_add(CAST(MAX(FiscalPeriodEndDate) AS DATE), 1) AS FiscalPeriodEndDate,\r\n",
					"        '{HistoricalCalendar}' AS Calendar,\r\n",
					"        YEAR(FiscalPeriodEndDate) AS FiscalYear,\r\n",
					"        CONCAT('Period ', month(FiscalPeriodEndDate)) AS PeriodName,\r\n",
					"        MONTH(FiscalPeriodEndDate) AS FiscalMonth,\r\n",
					"        CASE \r\n",
					"            WHEN MONTH(FiscalPeriodEndDate) BETWEEN 1 AND 3 THEN 1\r\n",
					"            WHEN MONTH(FiscalPeriodEndDate) BETWEEN 4 AND 6 THEN 2\r\n",
					"            WHEN MONTH(FiscalPeriodEndDate) BETWEEN 7 AND 9 THEN 3\r\n",
					"            ELSE 4\r\n",
					"        END AS FiscalQuarter,\r\n",
					"        1 AS Type,\r\n",
					"        current_timestamp() AS SyncStartDateTime\r\n",
					"    FROM TempTable_FiscalPeriod\r\n",
					"    GROUP BY FiscalYear, PeriodName, FiscalMonth, FiscalQuarter\r\n",
					"\"\"\")\r\n",
					"# Register the Temp Table\r\n",
					"GenDates.createOrReplaceTempView(\"TempTable_FiscalPeriodAdditionalDates\")\r\n",
					"\r\n",
					"# df_dates = spark.sql(\"SELECT * FROM TempTable_FiscalPeriodAdditionalDates\")\r\n",
					"# df_dates.show()\r\n",
					"\r\n",
					"# Define the Dataframe\r\n",
					"DF_Calendar = spark.sql(f\"\"\"SELECT  \r\n",
					"                                '-1' AS DateCode,\r\n",
					"                                to_date('1900-01-01') AS Date,\r\n",
					"                                to_date('1989-01-01') AS PreviousYearDate,\r\n",
					"                                '190001' AS CalendarPeriod,\r\n",
					"                                'Monday, January 1 1900' AS DateName,\r\n",
					"                                '1900' AS CalendarYear,\r\n",
					"                                'Year 1900' AS CalendarYearName,\r\n",
					"                                '1900-Q1' AS CalendarQuarter,\r\n",
					"                                'Quarter 1, 1900' AS CalendarQuarterName,\r\n",
					"                                '01' AS CalendarMonth,\r\n",
					"                                'January' AS MonthShortName,\r\n",
					"                                'January, 1900' AS CalendarMonthName,\r\n",
					"                                '01' AS CalendarWeek,\r\n",
					"                                'Week 01, 1900' AS CalendarWeekName,\r\n",
					"                                '001' AS CalendarDayOfYear,\r\n",
					"                                'Day 001, 1900' AS CalendarDayOfYearName,\r\n",
					"                                '01' AS DayOfMonth,\r\n",
					"                                'Day 01' AS DayOfMonthName,\r\n",
					"                                '1' AS DayOfWeek,\r\n",
					"                                'Day 1' AS DayOfWeekName,\r\n",
					"                                'Monday' AS Weekday,\r\n",
					"                                '1900, 01' AS CalendarWeekOfYear,\r\n",
					"                                'Week 01, 1900' AS CalendarWeekOfYearName,\r\n",
					"                                '1900, 01' AS CalendarMonthOfYear,\r\n",
					"                                'Month 01, 1900' AS CalendarMonthOfYearName,\r\n",
					"                                '1900, 1' AS CalendarQuarterOfYear,\r\n",
					"                                'Quarter 1, 1900' AS CalendarQuarterOfYearName,\r\n",
					"                                '1900-H1' AS CalendarHalfYear,\r\n",
					"                                '190001' AS FiscalPeriod,\r\n",
					"                                '1900' AS FiscalYear,\r\n",
					"                                'Fiscal Year 1900' AS FiscalYearName,\r\n",
					"                                '1900-Q1' AS FiscalQuarter,\r\n",
					"                                'Fiscal Quarter 1, 1900' AS FiscalQuarterName,\r\n",
					"                                '01' AS FiscalMonth,\r\n",
					"                                'January, 1900' AS FiscalMonthName,\r\n",
					"                                '1900-H1' AS FiscalHalfYear,\r\n",
					"                                '' AS Calendar\r\n",
					"                        UNION ALL\r\n",
					"                        SELECT  Calendar.DateCode,\r\n",
					"                                to_date(Calendar.Date) AS Date,\r\n",
					"                                ADD_MONTHS(to_date(Calendar.Date),-12) AS PreviousYearDate,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'),date_format(Calendar.Date, 'MM')) AS CalendarPeriod,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'EEEE'), \", \" ,date_format(Calendar.Date, 'MMMM'), \" \"  , date_format(Calendar.Date, 'd'),  \" \" , date_format(Calendar.Date, 'y')) AS DateName,\r\n",
					"                                date_format(Calendar.Date, 'y') AS CalendarYear,\r\n",
					"                                CONCAT(\"Year \", date_format(Calendar.Date, 'y')) AS CalendarYearName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'), '-Q', date_format(Calendar.Date, 'q')) AS CalendarQuarter,\r\n",
					"                                CONCAT(\"Quarter \", date_format(Calendar.Date, 'q'), \", \", date_format(Calendar.Date, 'y')) AS CalendarQuarterName,\r\n",
					"                                RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2) AS CalendarMonth,\r\n",
					"                                date_format(Calendar.Date, 'MMMM') AS MonthShortName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'MMMM'), \", \", date_format(Calendar.Date, 'y') ) AS CalendarMonthName,\r\n",
					"                                RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2) AS CalendarWeek,\r\n",
					"                                CONCAT(\"Week \", RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2), \", \",date_format(Calendar.Date, 'y')) AS CalendarWeekName,\r\n",
					"                                RIGHT(CONCAT('00', date_format(Calendar.Date, 'D')),3) AS CalendarDayOfYear,\r\n",
					"                                CONCAT(\"Day \", RIGHT(CONCAT('00', date_format(Calendar.Date, 'D')),3), \", \",date_format(Calendar.Date, 'y')) AS CalendarDayOfYearName,\r\n",
					"                                RIGHT(CONCAT('0', date_format(Calendar.Date, 'd')),2) AS DayOfMonth,\r\n",
					"                                CONCAT(\"Day \", RIGHT(CONCAT('0', date_format(Calendar.Date, 'd')),2)) AS DayOfMonthName,\r\n",
					"                                dayofweek(Calendar.Date) AS DayOfWeek,\r\n",
					"                                CONCAT(\"Day \",dayofweek(Calendar.Date)) AS DayOfWeekName,\r\n",
					"                                date_format(Calendar.Date, 'EEEE') AS Weekday,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'),', ',RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2)) AS CalendarWeekOfYear,\r\n",
					"                                CONCAT(\"Week \", RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2), \", \" ,date_format(Calendar.Date, 'y')) AS CalendarWeekOfYearName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'), \", \", RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2)) AS CalendarMonthOfYear,\r\n",
					"                                CONCAT(\"Month \", RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2), \", \",date_format(Calendar.Date, 'y') ) AS CalendarMonthOfYearName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'), \", \", date_format(Calendar.Date, 'q')) AS CalendarQuarterOfYear,\r\n",
					"                                CONCAT(\"Quarter \", date_format(Calendar.Date, 'q'), \", \", date_format(Calendar.Date, 'y')) AS CalendarQuarterOfYearName,\r\n",
					"                                CASE \r\n",
					"                                    WHEN int(date_format(Calendar.Date, 'q')) < 3\r\n",
					"                                    THEN CONCAT(date_format(Calendar.Date, 'y'), '-H1')\r\n",
					"                                    ELSE CONCAT(date_format(Calendar.Date, 'y'), '-H2')\r\n",
					"                                END AS CalendarHalfYear,\r\n",
					"                                CONCAT(RIGHT(Calendar.FiscalYear,4), right(CONCAT('0',FPO.FiscalMonth),2)) AS FiscalPeriod,\r\n",
					"                                RIGHT(Calendar.FiscalYear,4) AS FiscalYear,\r\n",
					"                                CONCAT(\"Fiscal Year \", RIGHT(Calendar.FiscalYear,4)) AS FiscalYearName,\r\n",
					"                                CONCAT(RIGHT(Calendar.FiscalYear,4), '-Q', FPO.FiscalQuarter ) AS FiscalQuarter,\r\n",
					"                                CONCAT(\"Fiscal Quarter \", FPO.FiscalQuarter, \", \", RIGHT(Calendar.FiscalYear,4)) AS FiscalQuarterName,\r\n",
					"                                RIGHT(CONCAT('0', FPO.FiscalMonth),2) AS FiscalMonth,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'MMMM'),\", \", RIGHT(Calendar.FiscalYear,4)) AS FiscalMonthName,\r\n",
					"                                CASE \r\n",
					"                                    WHEN FPO.FiscalQuarter < 3\r\n",
					"                                    THEN CONCAT(RIGHT(Calendar.FiscalYear,4), '-H1')\r\n",
					"                                    ELSE CONCAT(RIGHT(Calendar.FiscalYear,4), '-H2')\r\n",
					"                                END AS FiscalHalfYear,\r\n",
					"                                Calendar.Calendar AS Calendar\r\n",
					"                        FROM \r\n",
					"                            (SELECT CONCAT(FPI.CALENDAR, '_' ,FD.value) AS DateCode,\r\n",
					"                                    FPI.CALENDAR,\r\n",
					"                                    FPI.FISCALYEAR,\r\n",
					"                                    FD.value AS Date\r\n",
					"                             FROM TempTable_FiscalPeriodAdditionalDates FPI\r\n",
					"                             CROSS JOIN FiscalDates FD\r\n",
					"                             WHERE FD.Value BETWEEN FPI.FiscalPeriodStartDate AND FPI.FiscalPeriodEndDate) AS Calendar\r\n",
					"                             LEFT JOIN TempTable_FiscalPeriodAdditionalDates FPO\r\n",
					"                                  ON Calendar.Date BETWEEN FPO.FiscalPeriodStartDate AND FPO.FiscalPeriodEndDate\r\n",
					"                                  AND Calendar.Calendar = FPO.Calendar\r\n",
					"                        \"\"\")\r\n",
					"\r\n",
					"DF_Calendar.createOrReplaceTempView(\"TempTable_FiscalPeriodCalender\")\r\n",
					"df_calender = spark.sql(\"SELECT * FROM TempTable_FiscalPeriodCalender\")\r\n",
					"# df_calender.show()\r\n",
					"display(df_calender)\r\n",
					"\r\n",
					"# #Write cleansed data\r\n",
					"# DF_Calendar.write.format(\"delta\")\\\r\n",
					"#                  .mode(\"overwrite\")\\\r\n",
					"#                  .option(\"overwriteSchema\", \"false\")\\\r\n",
					"#                  .save(CuratedADLSPath)\r\n",
					"\r\n",
					"# #Display Dataframe Result\r\n",
					"# if Debug == True:\r\n",
					"#     print(\"Total Records: \" + str(DF_Calendar.count()))\r\n",
					"#     display(DF_Calendar.take(NoOfRecordsToDisplay))\r\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import to_date\r\n",
					"from datetime import date\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"\r\n",
					"# Hardcoded start and end dates\r\n",
					"GeneratedDatesStartDate = \"2023-04-01\"  # Example: April 1st, 2023\r\n",
					"HistoricalCalendar = \"Gregorian\"  # Example: Gregorian calendar\r\n",
					"\r\n",
					"# # Curated Target Folder Path\r\n",
					"CuratedADLSPath = 'abfss://%s@%s.dfs.core.windows.net/%s' % ('trainsyn', 'synmishtrain', 'test' +\"/\" + \"Dates\")\r\n",
					"\r\n",
					"# DF_StartEndDates = spark.sql(f\"\"\"SELECT CAST(\"{GeneratedDatesStartDate}\" AS Date) FiscalStartDate, CAST(MAX(FiscalPeriodEndDate) AS Date)+1 AS FiscalEndDate\r\n",
					"#                                 FROM TempTable_FiscalPeriod\"\"\")\r\n",
					"\r\n",
					"# Sample data\r\n",
					"date1 = str(date(2023, 3, 31)) \r\n",
					"date2 = str(date(2022, 3, 31))\r\n",
					"\r\n",
					"data = [(date1), (date2)]\r\n",
					"\r\n",
					"# Specify schema with string type\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"FiscalPeriodEndDate\", StringType())\r\n",
					"])\r\n",
					"\r\n",
					"# Create DataFrame \r\n",
					"df = spark.createDataFrame(data, schema=schema)\r\n",
					"\r\n",
					"df.createOrReplaceTempView(\"TempTable_FiscalPeriod\") \r\n",
					"\r\n",
					"DF_StartEndDates = spark.sql(\"\"\"\r\n",
					"    SELECT \r\n",
					"      CAST(MIN(FiscalPeriodEndDate) AS DATE) + INTERVAL 1 DAY AS FiscalStartDate,  \r\n",
					"      CAST(MAX(FiscalPeriodEndDate) AS DATE) + INTERVAL 1 DAY AS FiscalEndDate\r\n",
					"    FROM TempTable_FiscalPeriod\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# # Create List from DF_StartEndDates\r\n",
					"# DatesCollection = DF_StartEndDates.collect()\r\n",
					"\r\n",
					"# # Generate Date Ranges from Start & End Dates \r\n",
					"# def DimDate_PeriodInDaysDateRange(start_date, end_date):\r\n",
					"#     for n in range(int((end_date - start_date).days)):\r\n",
					"#         yield start_date + timedelta(n)\r\n",
					"\r\n",
					"# # Initialize list to store dates between Start & End Date\r\n",
					"# List_DimDatePeriodInDaysDates = []\r\n",
					"\r\n",
					"# # Loop in DatesCollection and generate all days between Start & End Date\r\n",
					"# for row in DatesCollection:\r\n",
					"#     PeriodInDaysStartDate = row[\"FiscalStartDate\"]\r\n",
					"#     PeriodInDaysEndDate =  row[\"FiscalEndDate\"]\r\n",
					"#     for single_date in DimDate_PeriodInDaysDateRange(PeriodInDaysStartDate, PeriodInDaysEndDate):\r\n",
					"#         # Append single days to Period In Days Dates List\r\n",
					"#         List_DimDatePeriodInDaysDates.append(single_date.strftime(\"%Y-%m-%d\"))\r\n",
					"\r\n",
					"# # Define the Dataframe from Period In Days Dates List\r\n",
					"# DF_PeriodInDaysDates = spark.createDataFrame(List_DimDatePeriodInDaysDates, StringType())\r\n",
					"# DF_PeriodInDaysDates.createOrReplaceTempView('FiscalDates')\r\n",
					"\r\n",
					"# # Define the Dataframe\r\n",
					"# GenDates = spark.sql(f\"\"\"SELECT FiscalPeriodStartDate,\r\n",
					"#                                FiscalPeriodEndDate,\r\n",
					"#                                Calendar,\r\n",
					"#                                FiscalYear,\r\n",
					"#                                PeriodName,\r\n",
					"#                                FiscalMonth,\r\n",
					"#                                FiscalQuarter,\r\n",
					"#                                Type, \r\n",
					"#                                SyncStartDateTime\r\n",
					"#                         FROM TempTable_FiscalPeriod\r\n",
					"#                         UNION ALL\r\n",
					"#                         (SELECT distinct(date_add(last_day(add_months(Date(FD.value), -1 )),1)) FiscalPeriodStartDate,\r\n",
					"#                                LAST_DAY(FD.value) FiscalPeriodEndDate,\r\n",
					"#                                '{HistoricalCalendar}' AS Calendar,\r\n",
					"#                                CASE \r\n",
					"#                                     WHEN month(FD.value) BETWEEN 7 AND 12 \r\n",
					"#                                         THEN CONCAT('FY', year(FD.value) +1)\r\n",
					"#                                     ELSE CONCAT('FY', year(FD.value)) \r\n",
					"#                                END AS FiscalYear,\r\n",
					"\r\n",
					"#                                CASE \r\n",
					"#                                     WHEN month(FD.value) BETWEEN 7 AND 12\r\n",
					"#                                         THEN CONCAT('Periode ', month(FD.value) - 6)\r\n",
					"#                                     ELSE CONCAT('Periode ', month(FD.value) + 6)\r\n",
					"#                                END AS PeriodName,\r\n",
					"\r\n",
					"#                                CASE \r\n",
					"#                                     WHEN month(FD.value) BETWEEN 7 AND 12\r\n",
					"#                                         THEN month(FD.value) - 6\r\n",
					"#                                     ELSE month(FD.value) + 6\r\n",
					"#                                END AS FiscalMonth,\r\n",
					"#                                CASE \r\n",
					"#                                     WHEN month(FD.value) BETWEEN 7 AND 9 \r\n",
					"#                                         THEN 1\r\n",
					"#                                     WHEN month(FD.value) BETWEEN 10 AND 12\r\n",
					"#                                         THEN 2\r\n",
					"#                                     WHEN month(FD.value) BETWEEN 1 AND 3\r\n",
					"#                                         THEN 3\r\n",
					"#                                     WHEN month(FD.value) BETWEEN 4 AND 6\r\n",
					"#                                         THEN 4\r\n",
					"#                                END AS FiscalQuarter,\r\n",
					"#                                1 AS Type,\r\n",
					"#                                current_timestamp() as SyncStartDateTime                               \r\n",
					"#                                FROM FiscalDates AS FD\r\n",
					"#                                WHERE FD.value < (Select MIN(FiscalPeriodStartDate) from TempTable_FiscalPeriod WHERE Calendar = '{HistoricalCalendar}'))\r\n",
					"#                                \"\"\")\r\n",
					"\r\n",
					"# # Register the Temp Table\r\n",
					"# GenDates.createOrReplaceTempView(\"TempTable_FiscalPeriodAdditionalDates\")\r\n",
					"\r\n",
					"# # Define the Dataframe\r\n",
					"# DF_Calendar = spark.sql(f\"\"\"SELECT  \r\n",
					"#                                 '-1' AS DateCode,\r\n",
					"#                                 to_date('1900-01-01') AS Date,\r\n",
					"#                                 to_date('1989-01-01') AS PreviousYearDate,\r\n",
					"#                                 '190001' AS CalendarPeriod,\r\n",
					"#                                 'Monday, January 1 1900' AS DateName,\r\n",
					"#                                 '1900' AS CalendarYear,\r\n",
					"#                                 'Year 1900' AS CalendarYearName,\r\n",
					"#                                 '1900-Q1' AS CalendarQuarter,\r\n",
					"#                                 'Quarter 1, 1900' AS CalendarQuarterName,\r\n",
					"#                                 '01' AS CalendarMonth,\r\n",
					"#                                 'January' AS MonthShortName,\r\n",
					"#                                 'January, 1900' AS CalendarMonthName,\r\n",
					"#                                 '01' AS CalendarWeek,\r\n",
					"#                                 'Week 01, 1900' AS CalendarWeekName,\r\n",
					"#                                 '001' AS CalendarDayOfYear,\r\n",
					"#                                 'Day 001, 1900' AS CalendarDayOfYearName,\r\n",
					"#                                 '01' AS DayOfMonth,\r\n",
					"#                                 'Day 01' AS DayOfMonthName,\r\n",
					"#                                 '1' AS DayOfWeek,\r\n",
					"#                                 'Day 1' AS DayOfWeekName,\r\n",
					"#                                 'Monday' AS Weekday,\r\n",
					"#                                 '1900, 01' AS CalendarWeekOfYear,\r\n",
					"#                                 'Week 01, 1900' AS CalendarWeekOfYearName,\r\n",
					"#                                 '1900, 01' AS CalendarMonthOfYear,\r\n",
					"#                                 'Month 01, 1900' AS CalendarMonthOfYearName,\r\n",
					"#                                 '1900, 1' AS CalendarQuarterOfYear,\r\n",
					"#                                 'Quarter 1, 1900' AS CalendarQuarterOfYearName,\r\n",
					"#                                 '1900-H1' AS CalendarHalfYear,\r\n",
					"#                                 '190001' AS FiscalPeriod,\r\n",
					"#                                 '1900' AS FiscalYear,\r\n",
					"#                                 'Fiscal Year 1900' AS FiscalYearName,\r\n",
					"#                                 '1900-Q1' AS FiscalQuarter,\r\n",
					"#                                 'Fiscal Quarter 1, 1900' AS FiscalQuarterName,\r\n",
					"#                                 '01' AS FiscalMonth,\r\n",
					"#                                 'January, 1900' AS FiscalMonthName,\r\n",
					"#                                 '1900-H1' AS FiscalHalfYear,\r\n",
					"#                                 '' AS Calendar\r\n",
					"#                         UNION ALL\r\n",
					"#                         SELECT  Calendar.DateCode,\r\n",
					"#                                 to_date(Calendar.Date) AS Date,\r\n",
					"#                                 ADD_MONTHS(to_date(Calendar.Date),-12) AS PreviousYearDate,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'y'),date_format(Calendar.Date, 'MM')) AS CalendarPeriod,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'EEEE'), \", \" ,date_format(Calendar.Date, 'MMMM'), \" \"  , date_format(Calendar.Date, 'd'),  \" \" , date_format(Calendar.Date, 'y')) AS DateName,\r\n",
					"#                                 date_format(Calendar.Date, 'y') AS CalendarYear,\r\n",
					"#                                 CONCAT(\"Year \", date_format(Calendar.Date, 'y')) AS CalendarYearName,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'y'), '-Q', date_format(Calendar.Date, 'q')) AS CalendarQuarter,\r\n",
					"#                                 CONCAT(\"Quarter \", date_format(Calendar.Date, 'q'), \", \", date_format(Calendar.Date, 'y')) AS CalendarQuarterName,\r\n",
					"#                                 RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2) AS CalendarMonth,\r\n",
					"#                                 date_format(Calendar.Date, 'MMMM') AS MonthShortName,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'MMMM'), \", \", date_format(Calendar.Date, 'y') ) AS CalendarMonthName,\r\n",
					"#                                 RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2) AS CalendarWeek,\r\n",
					"#                                 CONCAT(\"Week \", RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2), \", \",date_format(Calendar.Date, 'y')) AS CalendarWeekName,\r\n",
					"#                                 RIGHT(CONCAT('00', date_format(Calendar.Date, 'D')),3) AS CalendarDayOfYear,\r\n",
					"#                                 CONCAT(\"Day \", RIGHT(CONCAT('00', date_format(Calendar.Date, 'D')),3), \", \",date_format(Calendar.Date, 'y')) AS CalendarDayOfYearName,\r\n",
					"#                                 RIGHT(CONCAT('0', date_format(Calendar.Date, 'd')),2) AS DayOfMonth,\r\n",
					"#                                 CONCAT(\"Day \", RIGHT(CONCAT('0', date_format(Calendar.Date, 'd')),2)) AS DayOfMonthName,\r\n",
					"#                                 dayofweek(Calendar.Date) AS DayOfWeek,\r\n",
					"#                                 CONCAT(\"Day \",dayofweek(Calendar.Date)) AS DayOfWeekName,\r\n",
					"#                                 date_format(Calendar.Date, 'EEEE') AS Weekday,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'y'),', ',RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2)) AS CalendarWeekOfYear,\r\n",
					"#                                 CONCAT(\"Week \", RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2), \", \" ,date_format(Calendar.Date, 'y')) AS CalendarWeekOfYearName,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'y'), \", \", RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2)) AS CalendarMonthOfYear,\r\n",
					"#                                 CONCAT(\"Month \", RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2), \", \",date_format(Calendar.Date, 'y') ) AS CalendarMonthOfYearName,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'y'), \", \", date_format(Calendar.Date, 'q')) AS CalendarQuarterOfYear,\r\n",
					"#                                 CONCAT(\"Quarter \", date_format(Calendar.Date, 'q'), \", \", date_format(Calendar.Date, 'y')) AS CalendarQuarterOfYearName,\r\n",
					"#                                 CASE \r\n",
					"#                                     WHEN int(date_format(Calendar.Date, 'q')) < 3\r\n",
					"#                                     THEN CONCAT(date_format(Calendar.Date, 'y'), '-H1')\r\n",
					"#                                     ELSE CONCAT(date_format(Calendar.Date, 'y'), '-H2')\r\n",
					"#                                 END AS CalendarHalfYear,\r\n",
					"#                                 CONCAT(RIGHT(Calendar.FiscalYear,4), right(CONCAT('0',FPO.FiscalMonth),2)) AS FiscalPeriod,\r\n",
					"#                                 RIGHT(Calendar.FiscalYear,4) AS FiscalYear,\r\n",
					"#                                 CONCAT(\"Fiscal Year \", RIGHT(Calendar.FiscalYear,4)) AS FiscalYearName,\r\n",
					"#                                 CONCAT(RIGHT(Calendar.FiscalYear,4), '-Q', FPO.FiscalQuarter ) AS FiscalQuarter,\r\n",
					"#                                 CONCAT(\"Fiscal Quarter \", FPO.FiscalQuarter, \", \", RIGHT(Calendar.FiscalYear,4)) AS FiscalQuarterName,\r\n",
					"#                                 RIGHT(CONCAT('0', FPO.FiscalMonth),2) AS FiscalMonth,\r\n",
					"#                                 CONCAT(date_format(Calendar.Date, 'MMMM'),\", \", RIGHT(Calendar.FiscalYear,4)) AS FiscalMonthName,\r\n",
					"#                                 CASE \r\n",
					"#                                     WHEN FPO.FiscalQuarter < 3\r\n",
					"#                                     THEN CONCAT(RIGHT(Calendar.FiscalYear,4), '-H1')\r\n",
					"#                                     ELSE CONCAT(RIGHT(Calendar.FiscalYear,4), '-H2')\r\n",
					"#                                 END AS FiscalHalfYear,\r\n",
					"#                                 Calendar.Calendar AS Calendar\r\n",
					"#                         FROM \r\n",
					"#                             (SELECT CONCAT(FPI.CALENDAR, '_' ,FD.value) AS DateCode,\r\n",
					"#                                     FPI.CALENDAR,\r\n",
					"#                                     FPI.FISCALYEAR,\r\n",
					"#                                     FD.value AS Date\r\n",
					"#                              FROM TempTable_FiscalPeriodAdditionalDates FPI\r\n",
					"#                              CROSS JOIN FiscalDates FD\r\n",
					"#                              WHERE FD.Value BETWEEN FPI.FiscalPeriodStartDate AND FPI.FiscalPeriodEndDate) AS Calendar\r\n",
					"#                              LEFT JOIN TempTable_FiscalPeriodAdditionalDates FPO\r\n",
					"#                                   ON Calendar.Date BETWEEN FPO.FiscalPeriodStartDate AND FPO.FiscalPeriodEndDate\r\n",
					"#                                   AND Calendar.Calendar = FPO.Calendar\r\n",
					"#                         \"\"\")\r\n",
					"# #Write cleansed data\r\n",
					"# DF_Calendar.write.format(\"delta\")\\\r\n",
					"#                  .mode(\"overwrite\")\\\r\n",
					"#                  .option(\"overwriteSchema\", \"false\")\\\r\n",
					"#                  .save(CuratedADLSPath)\r\n",
					"\r\n",
					"# #Display Dataframe Result\r\n",
					"# if Debug == True:\r\n",
					"#     print(\"Total Records: \" + str(DF_Calendar.count()))\r\n",
					"#     display(DF_Calendar.take(NoOfRecordsToDisplay))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Curated Target Folder Path\r\n",
					"CuratedADLSPath = 'abfss://%s@%s.dfs.core.windows.net/%s' % (CleansedContainerName, CleansedStorageAccountName, CleansedRelativePath +\"/\" + \"Dates\")\r\n",
					"\r\n",
					"DF_StartEndDates =spark.sql(f\"\"\"SELECT CAST(\"{GeneratedDatesStartDate}\" AS Date) FiscalStartDate, CAST(MAX(FiscalPeriodEndDate) AS Date)+1 AS FiscalEndDate\r\n",
					"                                FROM TempTable_FiscalPeriod\"\"\")\r\n",
					"\r\n",
					"#Create List from DF_StartEndDates\r\n",
					"DatesCollection = DF_StartEndDates.collect()\r\n",
					"\r\n",
					"#Generate Date Ranges from Start & End Dates \r\n",
					"def DimDate_PeriodInDaysDateRange(start_date, end_date):\r\n",
					"    for n in range(int((end_date - start_date).days)):\r\n",
					"        yield start_date + timedelta(n)\r\n",
					"\r\n",
					"#Initialize list to store dates between Start & End Date\r\n",
					"List_DimDatePeriodInDaysDates = []\r\n",
					"\r\n",
					"#Loop in DatesCollection and generate all days between Start & End Date\r\n",
					"for row in DatesCollection:\r\n",
					"    PeriodInDaysStartDate = row[\"FiscalStartDate\"]\r\n",
					"    PeriodInDaysEndDate =  row[\"FiscalEndDate\"]\r\n",
					"    for single_date in DimDate_PeriodInDaysDateRange(PeriodInDaysStartDate, PeriodInDaysEndDate):\r\n",
					"        #Append single days to Period In Days Dates List\r\n",
					"        List_DimDatePeriodInDaysDates.append(single_date.strftime(\"%Y-%m-%d\"))\r\n",
					"\r\n",
					"#Define the Dataframe from Period In Days Dates List\r\n",
					"DF_PeriodInDaysDates = spark.createDataFrame(List_DimDatePeriodInDaysDates, StringType())\r\n",
					"DF_PeriodInDaysDates.createOrReplaceTempView('FiscalDates')\r\n",
					"\r\n",
					"#Define the Dataframe\r\n",
					"GenDates = spark.sql(f\"\"\"SELECT FiscalPeriodStartDate,\r\n",
					"                               FiscalPeriodEndDate,\r\n",
					"                               Calendar,\r\n",
					"                               FiscalYear,\r\n",
					"                               PeriodName,\r\n",
					"                               FiscalMonth,\r\n",
					"                               FiscalQuarter,\r\n",
					"                               Type, \r\n",
					"                               SyncStartDateTime\r\n",
					"                        FROM TempTable_FiscalPeriod\r\n",
					"                        UNION ALL\r\n",
					"                        (SELECT distinct(date_add(last_day(add_months(Date(FD.value), -1 )),1)) FiscalPeriodStartDate,\r\n",
					"                               LAST_DAY(FD.value) FiscalPeriodEndDate,\r\n",
					"                               '{HistoricalCalendar}' AS Calendar,\r\n",
					"                               CASE \r\n",
					"                                    WHEN month(FD.value) BETWEEN 7 AND 12 \r\n",
					"                                        THEN CONCAT('FY', year(FD.value) +1)\r\n",
					"                                    ELSE CONCAT('FY', year(FD.value)) \r\n",
					"                               END AS FiscalYear,\r\n",
					"\r\n",
					"                               CASE \r\n",
					"                                    WHEN month(FD.value) BETWEEN 7 AND 12\r\n",
					"                                        THEN CONCAT('Periode ', month(FD.value) - 6)\r\n",
					"                                    ELSE CONCAT('Periode ', month(FD.value) + 6)\r\n",
					"                               END AS PeriodName,\r\n",
					"\r\n",
					"                               CASE \r\n",
					"                                    WHEN month(FD.value) BETWEEN 7 AND 12\r\n",
					"                                        THEN month(FD.value) - 6\r\n",
					"                                    ELSE month(FD.value) + 6\r\n",
					"                               END AS FiscalMonth,\r\n",
					"                               CASE \r\n",
					"                                    WHEN month(FD.value) BETWEEN 7 AND 9 \r\n",
					"                                        THEN 1\r\n",
					"                                    WHEN month(FD.value) BETWEEN 10 AND 12\r\n",
					"                                        THEN 2\r\n",
					"                                    WHEN month(FD.value) BETWEEN 1 AND 3\r\n",
					"                                        THEN 3\r\n",
					"                                    WHEN month(FD.value) BETWEEN 4 AND 6\r\n",
					"                                        THEN 4\r\n",
					"                               END AS FiscalQuarter,\r\n",
					"                               1 AS Type,\r\n",
					"                               current_timestamp() as SyncStartDateTime                               \r\n",
					"                               FROM FiscalDates AS FD\r\n",
					"                               WHERE FD.value < (Select MIN(FiscalPeriodStartDate) from TempTable_FiscalPeriod WHERE Calendar = '{HistoricalCalendar}'))\r\n",
					"                               \"\"\")\r\n",
					"\r\n",
					"#Register the Temp Table\r\n",
					"GenDates.createOrReplaceTempView(\"TempTable_FiscalPeriodAdditionalDates\")\r\n",
					"\r\n",
					"#Define the Dataframe\r\n",
					"DF_Calendar = spark.sql(f\"\"\"SELECT  \r\n",
					"                                '-1' AS DateCode,\r\n",
					"                                to_date('1900-01-01') AS Date,\r\n",
					"                                to_date('1989-01-01') AS PreviousYearDate,\r\n",
					"                                '190001' AS CalendarPeriod,\r\n",
					"                                'Monday, January 1 1900' AS DateName,\r\n",
					"                                '1900' AS CalendarYear,\r\n",
					"                                'Year 1900' AS CalendarYearName,\r\n",
					"                                '1900-Q1' AS CalendarQuarter,\r\n",
					"                                'Quarter 1, 1900' AS CalendarQuarterName,\r\n",
					"                                '01' AS CalendarMonth,\r\n",
					"                                'January' AS MonthShortName,\r\n",
					"                                'January, 1900' AS CalendarMonthName,\r\n",
					"                                '01' AS CalendarWeek,\r\n",
					"                                'Week 01, 1900' AS CalendarWeekName,\r\n",
					"                                '001' AS CalendarDayOfYear,\r\n",
					"                                'Day 001, 1900' AS CalendarDayOfYearName,\r\n",
					"                                '01' AS DayOfMonth,\r\n",
					"                                'Day 01' AS DayOfMonthName,\r\n",
					"                                '1' AS DayOfWeek,\r\n",
					"                                'Day 1' AS DayOfWeekName,\r\n",
					"                                'Monday' AS Weekday,\r\n",
					"                                '1900, 01' AS CalendarWeekOfYear,\r\n",
					"                                'Week 01, 1900' AS CalendarWeekOfYearName,\r\n",
					"                                '1900, 01' AS CalendarMonthOfYear,\r\n",
					"                                'Month 01, 1900' AS CalendarMonthOfYearName,\r\n",
					"                                '1900, 1' AS CalendarQuarterOfYear,\r\n",
					"                                'Quarter 1, 1900' AS CalendarQuarterOfYearName,\r\n",
					"                                '1900-H1' AS CalendarHalfYear,\r\n",
					"                                '190001' AS FiscalPeriod,\r\n",
					"                                '1900' AS FiscalYear,\r\n",
					"                                'Fiscal Year 1900' AS FiscalYearName,\r\n",
					"                                '1900-Q1' AS FiscalQuarter,\r\n",
					"                                'Fiscal Quarter 1, 1900' AS FiscalQuarterName,\r\n",
					"                                '01' AS FiscalMonth,\r\n",
					"                                'January, 1900' AS FiscalMonthName,\r\n",
					"                                '1900-H1' AS FiscalHalfYear,\r\n",
					"                                '' AS Calendar\r\n",
					"                        UNION ALL\r\n",
					"                        SELECT  Calendar.DateCode,\r\n",
					"                                to_date(Calendar.Date) AS Date,\r\n",
					"                                ADD_MONTHS(to_date(Calendar.Date),-12) AS PreviousYearDate,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'),date_format(Calendar.Date, 'MM')) AS CalendarPeriod,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'EEEE'), \", \" ,date_format(Calendar.Date, 'MMMM'), \" \"  , date_format(Calendar.Date, 'd'),  \" \" , date_format(Calendar.Date, 'y')) AS DateName,\r\n",
					"                                date_format(Calendar.Date, 'y') AS CalendarYear,\r\n",
					"                                CONCAT(\"Year \", date_format(Calendar.Date, 'y')) AS CalendarYearName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'), '-Q', date_format(Calendar.Date, 'q')) AS CalendarQuarter,\r\n",
					"                                CONCAT(\"Quarter \", date_format(Calendar.Date, 'q'), \", \", date_format(Calendar.Date, 'y')) AS CalendarQuarterName,\r\n",
					"                                RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2) AS CalendarMonth,\r\n",
					"                                date_format(Calendar.Date, 'MMMM') AS MonthShortName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'MMMM'), \", \", date_format(Calendar.Date, 'y') ) AS CalendarMonthName,\r\n",
					"                                RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2) AS CalendarWeek,\r\n",
					"                                CONCAT(\"Week \", RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2), \", \",date_format(Calendar.Date, 'y')) AS CalendarWeekName,\r\n",
					"                                RIGHT(CONCAT('00', date_format(Calendar.Date, 'D')),3) AS CalendarDayOfYear,\r\n",
					"                                CONCAT(\"Day \", RIGHT(CONCAT('00', date_format(Calendar.Date, 'D')),3), \", \",date_format(Calendar.Date, 'y')) AS CalendarDayOfYearName,\r\n",
					"                                RIGHT(CONCAT('0', date_format(Calendar.Date, 'd')),2) AS DayOfMonth,\r\n",
					"                                CONCAT(\"Day \", RIGHT(CONCAT('0', date_format(Calendar.Date, 'd')),2)) AS DayOfMonthName,\r\n",
					"                                dayofweek(Calendar.Date) AS DayOfWeek,\r\n",
					"                                CONCAT(\"Day \",dayofweek(Calendar.Date)) AS DayOfWeekName,\r\n",
					"                                date_format(Calendar.Date, 'EEEE') AS Weekday,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'),', ',RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2)) AS CalendarWeekOfYear,\r\n",
					"                                CONCAT(\"Week \", RIGHT(CONCAT('0', weekofyear(Calendar.Date)),2), \", \" ,date_format(Calendar.Date, 'y')) AS CalendarWeekOfYearName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'), \", \", RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2)) AS CalendarMonthOfYear,\r\n",
					"                                CONCAT(\"Month \", RIGHT(CONCAT('0',date_format(Calendar.Date, 'M')),2), \", \",date_format(Calendar.Date, 'y') ) AS CalendarMonthOfYearName,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'y'), \", \", date_format(Calendar.Date, 'q')) AS CalendarQuarterOfYear,\r\n",
					"                                CONCAT(\"Quarter \", date_format(Calendar.Date, 'q'), \", \", date_format(Calendar.Date, 'y')) AS CalendarQuarterOfYearName,\r\n",
					"                                CASE \r\n",
					"                                    WHEN int(date_format(Calendar.Date, 'q')) < 3\r\n",
					"                                    THEN CONCAT(date_format(Calendar.Date, 'y'), '-H1')\r\n",
					"                                    ELSE CONCAT(date_format(Calendar.Date, 'y'), '-H2')\r\n",
					"                                END AS CalendarHalfYear,\r\n",
					"                                CONCAT(RIGHT(Calendar.FiscalYear,4), right(CONCAT('0',FPO.FiscalMonth),2)) AS FiscalPeriod,\r\n",
					"                                RIGHT(Calendar.FiscalYear,4) AS FiscalYear,\r\n",
					"                                CONCAT(\"Fiscal Year \", RIGHT(Calendar.FiscalYear,4)) AS FiscalYearName,\r\n",
					"                                CONCAT(RIGHT(Calendar.FiscalYear,4), '-Q', FPO.FiscalQuarter ) AS FiscalQuarter,\r\n",
					"                                CONCAT(\"Fiscal Quarter \", FPO.FiscalQuarter, \", \", RIGHT(Calendar.FiscalYear,4)) AS FiscalQuarterName,\r\n",
					"                                RIGHT(CONCAT('0', FPO.FiscalMonth),2) AS FiscalMonth,\r\n",
					"                                CONCAT(date_format(Calendar.Date, 'MMMM'),\", \", RIGHT(Calendar.FiscalYear,4)) AS FiscalMonthName,\r\n",
					"                                CASE \r\n",
					"                                    WHEN FPO.FiscalQuarter < 3\r\n",
					"                                    THEN CONCAT(RIGHT(Calendar.FiscalYear,4), '-H1')\r\n",
					"                                    ELSE CONCAT(RIGHT(Calendar.FiscalYear,4), '-H2')\r\n",
					"                                END AS FiscalHalfYear,\r\n",
					"                                Calendar.Calendar AS Calendar\r\n",
					"                        FROM \r\n",
					"                            (SELECT CONCAT(FPI.CALENDAR, '_' ,FD.value) AS DateCode,\r\n",
					"                                    FPI.CALENDAR,\r\n",
					"                                    FPI.FISCALYEAR,\r\n",
					"                                    FD.value AS Date\r\n",
					"                             FROM TempTable_FiscalPeriodAdditionalDates FPI\r\n",
					"                             CROSS JOIN FiscalDates FD\r\n",
					"                             WHERE FD.Value BETWEEN FPI.FiscalPeriodStartDate AND FPI.FiscalPeriodEndDate) AS Calendar\r\n",
					"                             LEFT JOIN TempTable_FiscalPeriodAdditionalDates FPO\r\n",
					"                                  ON Calendar.Date BETWEEN FPO.FiscalPeriodStartDate AND FPO.FiscalPeriodEndDate\r\n",
					"                                  AND Calendar.Calendar = FPO.Calendar\r\n",
					"                        \"\"\")\r\n",
					"\r\n",
					"#Write cleansed data\r\n",
					"DF_Calendar.write.format(\"delta\")\\\r\n",
					"                 .mode(\"overwrite\")\\\r\n",
					"                 .option(\"overwriteSchema\", \"false\")\\\r\n",
					"                 .save(CuratedADLSPath)\r\n",
					"\r\n",
					"#Display Dataframe Result\r\n",
					"if Debug == True:\r\n",
					"    print(\"Total Records: \" + str(DF_Calendar.count()))\r\n",
					"    display(DF_Calendar.take(NoOfRecordsToDisplay))\r\n",
					""
				]
			}
		]
	}
}