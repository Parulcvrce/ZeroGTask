{
	"name": "Notebook 3",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1c923b2e-87bc-4901-bf62-9a33db6d6b3b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"1a5b843a-7425-4465-a2e9-38ea7afcc9be": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": "1",
										"2": "Complete",
										"3": "2024-04-18T16:50:09.627+00:00",
										"4": "2024-04-18T16:57:42.833+00:00",
										"5": "1",
										"6": "1",
										"7": "1",
										"8": "2024-04-18T16:57:42.843+00:00",
										"9": "2024-04-18T16:57:42.74+00:00",
										"10": "CompleteInfo",
										"11": "Alastair Cross",
										"12": "alastair.cross@accaglobal.com",
										"13": "225",
										"14": "55555555",
										"15": "6",
										"16": "1",
										"17": "1",
										"18": "4",
										"19": "1",
										"20": "3",
										"21": "4",
										"22": "1",
										"23": "student",
										"24": "7",
										"25": "1",
										"26": "4",
										"27": "3",
										"28": "4",
										"29": "2",
										"30": "",
										"31": "1",
										"32": "5",
										"33": "5",
										"34": "3",
										"35": "5",
										"36": "3",
										"37": "4",
										"38": "4",
										"39": "4",
										"40": "3",
										"41": "1",
										"42": "1",
										"43": "3",
										"44": "2",
										"45": "test alastair",
										"46": "4",
										"47": "all good!",
										"48": "1",
										"49": "1",
										"50": "1",
										"51": "1",
										"52": "2",
										"53": "3",
										"54": "3",
										"55": "2",
										"56": "1",
										"57": "1",
										"58": "4",
										"59": "2",
										"60": "4",
										"61": "5",
										"62": "3",
										"63": "6",
										"64": "4",
										"65": "3",
										"66": "4",
										"67": "[3]",
										"68": "Alastair test",
										"69": "5",
										"70": "4",
										"71": "2",
										"72": "4",
										"73": "4",
										"74": "4",
										"75": "3",
										"76": "4",
										"77": "5",
										"78": "4",
										"79": "[2]",
										"80": "[1, 3, 4]"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "responseid",
										"type": "bigint"
									},
									{
										"key": "1",
										"name": "respid",
										"type": "bigint"
									},
									{
										"key": "2",
										"name": "status",
										"type": "string"
									},
									{
										"key": "3",
										"name": "interview_start",
										"type": "string"
									},
									{
										"key": "4",
										"name": "interview_end",
										"type": "string"
									},
									{
										"key": "5",
										"name": "lastchannel",
										"type": "bigint"
									},
									{
										"key": "6",
										"name": "lastdevicetype",
										"type": "bigint"
									},
									{
										"key": "7",
										"name": "lastrenderingmode",
										"type": "bigint"
									},
									{
										"key": "8",
										"name": "last_touched",
										"type": "string"
									},
									{
										"key": "9",
										"name": "lastcomplete",
										"type": "string"
									},
									{
										"key": "10",
										"name": "first_question_on_last_page_displayed",
										"type": "string"
									},
									{
										"key": "11",
										"name": "Full_name",
										"type": "string"
									},
									{
										"key": "12",
										"name": "email",
										"type": "string"
									},
									{
										"key": "13",
										"name": "Country",
										"type": "string"
									},
									{
										"key": "14",
										"name": "ACCA_ID",
										"type": "string"
									},
									{
										"key": "15",
										"name": "L2region",
										"type": "string"
									},
									{
										"key": "16",
										"name": "Tenure",
										"type": "string"
									},
									{
										"key": "17",
										"name": "Activity",
										"type": "string"
									},
									{
										"key": "18",
										"name": "Month_assigned_for_Relationship_Survey",
										"type": "string"
									},
									{
										"key": "19",
										"name": "No_Of_Papers_Completed",
										"type": "bigint"
									},
									{
										"key": "20",
										"name": "Email_Consent_Level",
										"type": "string"
									},
									{
										"key": "21",
										"name": "Client_Type",
										"type": "string"
									},
									{
										"key": "22",
										"name": "Customer_Type",
										"type": "string"
									},
									{
										"key": "23",
										"name": "CustomerTypeforPiping",
										"type": "string"
									},
									{
										"key": "24",
										"name": "Performance",
										"type": "string"
									},
									{
										"key": "25",
										"name": "SMS_consent_level",
										"type": "string"
									},
									{
										"key": "26",
										"name": "Q1",
										"type": "string"
									},
									{
										"key": "27",
										"name": "Q3",
										"type": "string"
									},
									{
										"key": "28",
										"name": "Q32",
										"type": "string"
									},
									{
										"key": "29",
										"name": "Q35",
										"type": "string"
									},
									{
										"key": "30",
										"name": "Q35_5$other",
										"type": "string"
									},
									{
										"key": "31",
										"name": "pipeQ22",
										"type": "string"
									},
									{
										"key": "32",
										"name": "Q10",
										"type": "string"
									},
									{
										"key": "33",
										"name": "Q11",
										"type": "string"
									},
									{
										"key": "34",
										"name": "Q12",
										"type": "string"
									},
									{
										"key": "35",
										"name": "Q13",
										"type": "string"
									},
									{
										"key": "36",
										"name": "Q15moved",
										"type": "string"
									},
									{
										"key": "37",
										"name": "Q22",
										"type": "string"
									},
									{
										"key": "38",
										"name": "Q23",
										"type": "string"
									},
									{
										"key": "39",
										"name": "Q24",
										"type": "string"
									},
									{
										"key": "40",
										"name": "Q26",
										"type": "string"
									},
									{
										"key": "41",
										"name": "Q37",
										"type": "string"
									},
									{
										"key": "42",
										"name": "Q41",
										"type": "string"
									},
									{
										"key": "43",
										"name": "Q43",
										"type": "string"
									},
									{
										"key": "44",
										"name": "Q44",
										"type": "string"
									},
									{
										"key": "45",
										"name": "Q47",
										"type": "string"
									},
									{
										"key": "46",
										"name": "q93",
										"type": "string"
									},
									{
										"key": "47",
										"name": "QuantFeedbackQ55",
										"type": "string"
									},
									{
										"key": "48",
										"name": "Q56",
										"type": "string"
									},
									{
										"key": "49",
										"name": "Q5_2",
										"type": "string"
									},
									{
										"key": "50",
										"name": "Q5_3",
										"type": "string"
									},
									{
										"key": "51",
										"name": "Q5_5",
										"type": "string"
									},
									{
										"key": "52",
										"name": "Q5_6",
										"type": "string"
									},
									{
										"key": "53",
										"name": "Q5_9",
										"type": "string"
									},
									{
										"key": "54",
										"name": "Q5_10",
										"type": "string"
									},
									{
										"key": "55",
										"name": "Q5_12",
										"type": "string"
									},
									{
										"key": "56",
										"name": "Q5_13",
										"type": "string"
									},
									{
										"key": "57",
										"name": "Q5_14",
										"type": "string"
									},
									{
										"key": "58",
										"name": "Q6_2",
										"type": "string"
									},
									{
										"key": "59",
										"name": "Q6_3",
										"type": "string"
									},
									{
										"key": "60",
										"name": "Q6_6",
										"type": "string"
									},
									{
										"key": "61",
										"name": "Q6_7",
										"type": "string"
									},
									{
										"key": "62",
										"name": "Q6_10",
										"type": "string"
									},
									{
										"key": "63",
										"name": "Q6_11",
										"type": "string"
									},
									{
										"key": "64",
										"name": "Q6_13",
										"type": "string"
									},
									{
										"key": "65",
										"name": "Q6_14",
										"type": "string"
									},
									{
										"key": "66",
										"name": "Q6_15",
										"type": "string"
									},
									{
										"key": "67",
										"name": "hQ6Selected_true",
										"type": "string"
									},
									{
										"key": "68",
										"name": "Q7b_3",
										"type": "string"
									},
									{
										"key": "69",
										"name": "Q16_5",
										"type": "string"
									},
									{
										"key": "70",
										"name": "Q16_6",
										"type": "string"
									},
									{
										"key": "71",
										"name": "Q17_1",
										"type": "string"
									},
									{
										"key": "72",
										"name": "Q17_2",
										"type": "string"
									},
									{
										"key": "73",
										"name": "Q17_3",
										"type": "string"
									},
									{
										"key": "74",
										"name": "Q17_4",
										"type": "string"
									},
									{
										"key": "75",
										"name": "Q18_2",
										"type": "string"
									},
									{
										"key": "76",
										"name": "Q18_3",
										"type": "string"
									},
									{
										"key": "77",
										"name": "Q18_5",
										"type": "string"
									},
									{
										"key": "78",
										"name": "Q18_6",
										"type": "string"
									},
									{
										"key": "79",
										"name": "Q36_true",
										"type": "string"
									},
									{
										"key": "80",
										"name": "Q36_false",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35c7c256-febc-4c53-82a5-71e8573a3c24/resourceGroups/rg-pmishra-training-001/providers/Microsoft.Synapse/workspaces/trainparmish/bigDataPools/Sparkpool",
				"name": "Sparkpool",
				"type": "Spark",
				"endpoint": "https://trainparmish.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Get Authorization Token**"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import requests\r\n",
					"\r\n",
					"# Configuration\r\n",
					"idp_url = \"https://idp.nordic.confirmit.com/\"\r\n",
					"# site_url = \"https://ws.nordic.confirmit.com/\"\r\n",
					"site_url = \"https://idp.nordic.confirmit.com\"\r\n",
					"client_id = \"67b37746-5c35-4f0e-8e54-c9f6e5ab0abd\"\r\n",
					"client_secret = \"4b28c286-cf29-4539-83a6-aac5a99195ed\"\r\n",
					"\r\n",
					"# Source configuration\r\n",
					"surveyid = \"p893721127564\" # Relationship survey\r\n",
					"\r\n",
					"# Get access token\r\n",
					"data = {\r\n",
					"    \"client_id\": client_id,\r\n",
					"    \"client_secret\": client_secret,\r\n",
					"    \"grant_type\": \"api-user\",\r\n",
					"    \"scope\": \"pub.surveys\"\r\n",
					"}\r\n",
					"\r\n",
					"headers = {\r\n",
					"    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n",
					"}\r\n",
					"response = requests.post(idp_url + 'identity/connect/token', data=data, headers=headers)\r\n",
					"response.raise_for_status()\r\n",
					"resp_obj = response.json()\r\n",
					"token = resp_obj['access_token']\r\n",
					"print(token)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Read Data From Frosta API**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import requests\r\n",
					"import pandas as pd\r\n",
					"import json\r\n",
					"\r\n",
					"def flatten(d, parent_key='', sep='_'):\r\n",
					"    items = []\r\n",
					"    for k, v in d.items():\r\n",
					"        new_key = parent_key + sep + k if parent_key else k\r\n",
					"        if isinstance(v, dict):\r\n",
					"            items.extend(flatten(v, new_key, sep=sep).items())\r\n",
					"        elif isinstance(v, list):\r\n",
					"            for i, item in enumerate(v):\r\n",
					"                items.extend(flatten(item, new_key + sep + str(i), sep=sep).items())\r\n",
					"        else:\r\n",
					"            items.append((new_key, v))\r\n",
					"    return dict(items)\r\n",
					"\r\n",
					"surveyid = \"p893721127564\"\r\n",
					"site_url = \"https://idp.nordic.confirmit.com/\"\r\n",
					"# Get source data records\r\n",
					"headers = {'Authorization': 'Bearer ' + token, \"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\r\n",
					"url = site_url + 'v1/surveys/' + surveyid + '/responses/data'\r\n",
					"response = requests.get(url, headers=headers)\r\n",
					"\r\n",
					"if response.status_code == 200:\r\n",
					"    if 'application/json' in response.headers.get('Content-Type', ''):\r\n",
					"        json_str = response.content.decode(\"utf-8\")\r\n",
					"        # print(json_str)\r\n",
					"        # Replace '=' with ':'\r\n",
					"        json_str = json_str.replace('=', ':')\r\n",
					"        # Load the JSON string into a Python object\r\n",
					"        json_data = json.loads(json_str)\r\n",
					"        print(json_data)\r\n",
					"        # Extract items from the JSON data\r\n",
					"        items_data = json_data.get('items', [])\r\n",
					"        # Normalize the items data into a pandas DataFrame\r\n",
					"        df = pd.json_normalize(items_data)\r\n",
					"        # Replace dots in column names with underscores\r\n",
					"        df.columns = df.columns.str.replace('.', '_')\r\n",
					"\r\n",
					"        ####Not Needed############\r\n",
					"        # # Flatten the nested JSON structure\r\n",
					"        # flattened_data = [flatten(d) for d in json_data]\r\n",
					"        # # Normalize the flattened data into a pandas DataFrame\r\n",
					"        # df = pd.json_normalize(flattened_data)\r\n",
					"    else:\r\n",
					"        print(\"Response is not in JSON format. Content:\")\r\n",
					"        print(response.text)\r\n",
					"else:\r\n",
					"    print(\"Request failed with status code:\", response.status_code)\r\n",
					"\r\n",
					"# Print the DataFrame\r\n",
					"display(df)\r\n",
					"\r\n",
					"# # Write the new Employer Survey data to RAW\r\n",
					"# DF_EmployerSurveyData.write.format(\"delta\")\\\r\n",
					"#                                 .mode(\"append\")\\\r\n",
					"#                                 .option(\"overwriteSchema\", \"false\")\\\r\n",
					"#                                 .save(RawADLSPath)"
				],
				"execution_count": 74
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Get Survey ID**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import requests\r\n",
					"import pandas as pd\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"surveyid = \"p893721127564\"\r\n",
					"site_url = \"https://idp.nordic.confirmit.com/\"\r\n",
					"# Get source data records\r\n",
					"headers = {'Authorization': 'Bearer ' + token, \"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\r\n",
					"url = site_url + 'v1/surveys/'+'?pageSize=100&page=1'\r\n",
					"response = requests.get(url, headers=headers)\r\n",
					"\r\n",
					"if response.status_code == 200:\r\n",
					"    if 'application/json' in response.headers.get('Content-Type', ''):\r\n",
					"        json_data = response.json()\r\n",
					"        # Extract items from the JSON data\r\n",
					"        items_data = json_data.get('items', [])\r\n",
					"        # Normalize the items data into a pandas DataFrame\r\n",
					"        df = pd.json_normalize(items_data)\r\n",
					"        # display(df)\r\n",
					"        DF_ForstaSurveyID = df.copy()\r\n",
					"        DF_ForstaSurveyID.createOrReplaceTempView(\"TempTable_GetForstaSurveyId\")\r\n",
					"        # DF_ForstaSurveyID= spark.sql(\"SELECT * FROM TempTable_GetForstaSurveyId\")\r\n",
					"        # display(DF_ForstaSurveyID)\r\n",
					"\r\n",
					"\r\n",
					"    else:\r\n",
					"        print(\"Response is not in JSON format. Content:\")\r\n",
					"        print(response.text)\r\n",
					"else:\r\n",
					"    print(\"Request failed with status code:\", response.status_code)\r\n",
					"\r\n",
					"# Print the DataFrame\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# # Write the new Employer Survey data to RAW\r\n",
					"# DF_EmployerSurveyData.write.format(\"delta\")\\\r\n",
					"#                                 .mode(\"append\")\\\r\n",
					"#                                 .option(\"overwriteSchema\", \"false\")\\\r\n",
					"#                                 .save(RawADLSPath)"
				],
				"execution_count": 15
			}
		]
	}
}