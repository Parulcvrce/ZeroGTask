{
	"name": "Notebook 10",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5e87a264-42d0-4766-b998-37fc92ecdad6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35c7c256-febc-4c53-82a5-71e8573a3c24/resourceGroups/rg-pmishra-training-001/providers/Microsoft.Synapse/workspaces/trainparmish/bigDataPools/Sparkpool",
				"name": "Sparkpool",
				"type": "Spark",
				"endpoint": "https://trainparmish.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import to_date, to_timestamp, col, lit, sum, avg, count, concat, when\r\n",
					"from pyspark.sql.functions import when, col, lit, split"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark = SparkSession.builder.appName(\"ZeroG Airline Data Pipeline\").getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# READ PAX DATA"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This code snippet in PySpark reads data from multiple CSV files located in Azure Blob Storage PAX folder"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DF_PAX= spark.read.format('csv')\\\r\n",
					"                        .option('header', 'true')\\\r\n",
					"                        .option('inferred','true')\\\r\n",
					"                        .load('wasbs://raw@synapsesazerog.blob.core.windows.net/stage/pax/*')\r\n",
					"\r\n",
					"\r\n",
					"display(DF_PAX)\r\n",
					"\r\n",
					"DF_PAX.createOrReplaceTempView(\"TempView_pax\")\r\n",
					"\r\n",
					"# if Debug:\r\n",
					"#     display(DF.limit(NoOfRecordsToDisplay)) \r\n",
					"\r\n",
					"DF_PAX = spark.sql(\"SELECT * FROM TempView_pax\")\r\n",
					"\r\n",
					"# DF_PAX.printSchema()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## READ SALES DATA"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This code snippet in PySpark reads data from multiple CSV files located in Azure Blob Storage Sales folder"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DF_Sales= spark.read.format('csv')\\\r\n",
					"                        .option('header', 'true')\\\r\n",
					"                        .option('inferred','true')\\\r\n",
					"                        .load('wasbs://raw@synapsesazerog.blob.core.windows.net/stage/sales/*')\r\n",
					"\r\n",
					"\r\n",
					"display(DF_Sales)\r\n",
					"\r\n",
					"DF_Sales.createOrReplaceTempView(\"TempView_sales\")\r\n",
					"\r\n",
					"# if Debug:\r\n",
					"#     display(DF.limit(NoOfRecordsToDisplay)) \r\n",
					"\r\n",
					"DF_Sales = spark.sql(\"SELECT * FROM TempView_sales\")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### READ LOADING DATA"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This code snippet in PySpark reads data from multiple CSV files located in Azure Blob Storage lOADING folder"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DF_loading= spark.read.format('json')\\\r\n",
					"                        .option('header', 'true')\\\r\n",
					"                        .option('inferred','true')\\\r\n",
					"                        .load('wasbs://raw@synapsesazerog.blob.core.windows.net/loading/*')\r\n",
					"\r\n",
					"\r\n",
					"display(DF_loading)\r\n",
					"\r\n",
					"\r\n",
					"DF_loading.createOrReplaceTempView(\"TempView_loading\")\r\n",
					"\r\n",
					"# if Debug:\r\n",
					"#     display(DF.limit(NoOfRecordsToDisplay)) \r\n",
					"\r\n",
					"DF_loading = spark.sql(\"SELECT * FROM TempView_loading\")\r\n",
					"\r\n",
					"# DF_Sales.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Transform Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"df_loading = spark.sql(\"SELECT * FROM TempView_loading\")\r\n",
					"df_sales = spark.sql(\"SELECT * FROM TempView_sales\")\r\n",
					"df_pax = spark.sql(\"SELECT * FROM TempView_pax\")\r\n",
					"\r\n",
					"\r\n",
					"# Rename columns for consistency\r\n",
					"df_loading = df_loading.withColumnRenamed(\"Flight Month/Year\", \"FlightMonthYear\")\\\r\n",
					"                        .withColumnRenamed(\"Flight Date\", \"Date\") \\\r\n",
					"                       .withColumnRenamed(\"Flightnumber\", \"Flight\")\r\n",
					"\r\n",
					"df_sales = df_sales.withColumnRenamed(\"Flight Number\", \"Flight\") \\\r\n",
					"                   .withColumnRenamed(\"Boarded Y\", \"SalesBoardedY\") \\\r\n",
					"                   .withColumnRenamed(\"Capacity Physical Y\", \"SalesCapacityPhysicalY\")\r\n",
					"\r\n",
					"df_pax = df_pax.withColumnRenamed(\"Flight Number\", \"Flight\")\r\n",
					"\r\n",
					"# Converting date columns for a consistent format\r\n",
					"df_loading = df_loading.withColumn(\"FlightDate\", to_date(col(\"Date\"), \"yyyy-MM-dd\"))\r\n",
					"df_sales = df_sales.withColumn(\"FlightDate\", to_date(col(\"Date\"), \"yyyy-MM-dd\"))\r\n",
					"df_pax = df_pax.withColumn(\"FlightDate\", to_date(col(\"Date\"), \"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"# Joining dataframes based on `Flight` and `FlightDate`\r\n",
					"df_joined = df_sales.join(df_loading, [\"Flight\", \"FlightDate\"], \"outer\") \\\r\n",
					"                   .join(df_pax, [\"Flight\", \"FlightDate\"], \"outer\")\r\n",
					"\r\n",
					"\r\n",
					"df_joined = df_joined.drop(\"tempview_pax.Boarded Y\")  \r\n",
					"df_joined = df_joined.drop(\"tempview_pax.Capacity Physical Y\")\r\n",
					"\r\n",
					"df_cleaned = df_joined.select(\r\n",
					"    \"Flight\",\r\n",
					"    \"FlightDate\",\r\n",
					"    col(\"SalesBoardedY\").cast(\"integer\").alias(\"BoardedPassengers\"), \r\n",
					"    col(\"SalesCapacityPhysicalY\").cast(\"integer\").alias(\"PhysicalCapacity\"), \r\n",
					"    col(\"Airline\"),  \r\n",
					"    col(\"Aircraft Type\").alias(\"AircraftType\"), \r\n",
					"    col(\"Arrival Unit\").alias(\"ArrivalUnit\"), \r\n",
					"    col(\"Departure Unit\").alias(\"DepartureUnit\"), \r\n",
					"    col(\"Invoice Quantity\").cast(\"integer\").alias(\"InvoiceQuantity\"), \r\n",
					"    col(\"Price\").cast(\"double\"), \r\n",
					"    col(\"Booking Class CBASE\") \r\n",
					")\r\n",
					"\r\n",
					"\r\n",
					"df_cleaned = df_cleaned.withColumn(\r\n",
					"    \"LoadFactor\",\r\n",
					"    (col(\"BoardedPassengers\") / col(\"PhysicalCapacity\")) * 100\r\n",
					").withColumn(\r\n",
					"    \"IsFull\",\r\n",
					"    when(col(\"BoardedPassengers\") == col(\"PhysicalCapacity\"), 1).otherwise(0)\r\n",
					").withColumn(\r\n",
					"    \"EmptySeats\",\r\n",
					"    col(\"PhysicalCapacity\") - col(\"BoardedPassengers\")\r\n",
					").withColumn(\r\n",
					"    \"EstimatedRevenue\",\r\n",
					"    col(\"Price\").cast(\"double\") * col(\"InvoiceQuantity\").cast(\"integer\")\r\n",
					").withColumn(\r\n",
					"    \"AvgRevenuePerPassenger\",\r\n",
					"    when(col(\"BoardedPassengers\") > 0, col(\"EstimatedRevenue\") / col(\"BoardedPassengers\")).otherwise(0)\r\n",
					").withColumn(\r\n",
					"    \"BookingClass\",\r\n",
					"    when(col(\"Booking Class CBASE\").isNotNull(), split(col(\"Booking Class CBASE\"), \",\")[0]).otherwise(lit(None))\r\n",
					")\r\n",
					"\r\n",
					"\r\n",
					"# Data aggregation for data analysts\r\n",
					"df_analysts = df_cleaned.groupBy(\"Flight\").agg(\r\n",
					"    sum(\"InvoiceQuantity\").alias(\"TotalItemsSold\"), \r\n",
					"    sum(\"BoardedPassengers\").alias(\"TotalPassengers\"),\r\n",
					"    avg(\"EstimatedRevenue\").alias(\"AvgRevenue\") \r\n",
					")\r\n",
					"\r\n",
					"# Data aggregation for data scientists\r\n",
					"df_scientists = df_cleaned.select(\r\n",
					"    \"Flight\", \r\n",
					"    \"BoardedPassengers\", \r\n",
					"    \"InvoiceQuantity\", \r\n",
					"    \"LoadFactor\",\r\n",
					"    \"EstimatedRevenue\",\r\n",
					"    \"AvgRevenuePerPassenger\"\r\n",
					")\r\n",
					"display(df_analysts)\r\n",
					"\r\n",
					"display(df_scientists)\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### WRITE THE DATA IN PROCESSED"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save data to Parquet files in the specified paths\r\n",
					"\r\n",
					"df_scientists.write.mode(\"overwrite\").parquet(\"abfss://processed@synapsesazerog.dfs.core.windows.net/data_for_scientists/\")\r\n",
					"\r\n",
					"df_analysts.write.mode(\"overwrite\").parquet(\"abfss://processed@synapsesazerog.dfs.core.windows.net/data_for_analysts/\")"
				],
				"execution_count": null
			}
		]
	}
}