{
	"name": "Notebook 4",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "06e8e330-b455-4b44-8982-bf2a323d5351"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35c7c256-febc-4c53-82a5-71e8573a3c24/resourceGroups/rg-pmishra-training-001/providers/Microsoft.Synapse/workspaces/trainparmish/bigDataPools/Sparkpool",
				"name": "Sparkpool",
				"type": "Spark",
				"endpoint": "https://trainparmish.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from datetime import datetime\r\n",
					"from pyspark.sql.utils import AnalysisException\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.functions import col, max ,lit\r\n",
					"\r\n",
					"\r\n",
					"#Debug\r\n",
					"Debug = True\r\n",
					"NoOfRecordsToDisplay = 1000\r\n",
					"\r\n",
					"#Set Spark Config\r\n",
					"spark.conf.set(\"spark.sql.sources.partitionOverwriteMode\",\"dynamic\")\r\n",
					"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\",20971520)\r\n",
					"spark.conf.set(\"spark.sql.adaptive.enabled\",\"true\")\r\n",
					"spark.conf.set(\"spark.sql.adaptive.skewJoin.enabled\",\"true\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://raw@synapsesazerog.dfs.core.windows.net/pax/*', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					")\r\n",
					"display(df)\r\n",
					"\r\n",
					"#Register the Temp Table\r\n",
					"DF_CountryRollup.createOrReplaceTempView(\"TempTable_CountryRollup\")"
				],
				"execution_count": 2
			}
		]
	}
}