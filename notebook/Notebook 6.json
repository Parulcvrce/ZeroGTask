{
	"name": "Notebook 6",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b0bd2796-d9fc-4f03-af26-6685d08f3315"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35c7c256-febc-4c53-82a5-71e8573a3c24/resourceGroups/rg-pmishra-training-001/providers/Microsoft.Synapse/workspaces/trainparmish/bigDataPools/Sparkpool",
				"name": "Sparkpool",
				"type": "Spark",
				"endpoint": "https://trainparmish.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Pax"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# df= spark.read.format('csv')\\\r\n",
					"#                         .option('header', 'true')\\\r\n",
					"#                         .option('inferred','true')\\\r\n",
					"#                         .load('wasbs://raw@synapsesazerog.blob.core.windows.net/stage/pax 03 2019.txt')\r\n",
					"\r\n",
					"# display(df)\r\n",
					"\r\n",
					"\r\n",
					"DF_PAX= spark.read.format('csv')\\\r\n",
					"                        .option('header', 'true')\\\r\n",
					"                        .option('inferred','true')\\\r\n",
					"                        .load('wasbs://raw@synapsesazerog.blob.core.windows.net/stage/*')\r\n",
					"\r\n",
					"display(DF_PAX)\r\n",
					"\r\n",
					"DF_PAX.createOrReplaceTempView(\"TempView_pax\")\r\n",
					"\r\n",
					"# if Debug:\r\n",
					"#     display(DF.limit(NoOfRecordsToDisplay)) \r\n",
					"\r\n",
					"DF_PAX = spark.sql(\"SELECT * FROM TempView_pax\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DF_Sales= spark.read.format('csv')\\\r\n",
					"                        .option('header', 'true')\\\r\n",
					"                        .option('inferred','true')\\\r\n",
					"                        .load('wasbs://raw@synapsesazerog.blob.core.windows.net/stage/sales/*')\r\n",
					"\r\n",
					"\r\n",
					"display(DF_Sales)\r\n",
					"\r\n",
					"DF_Sales.createOrReplaceTempView(\"TempView_sales\")\r\n",
					"\r\n",
					"# if Debug:\r\n",
					"#     display(DF.limit(NoOfRecordsToDisplay)) \r\n",
					"\r\n",
					"DF_Sales = spark.sql(\"SELECT * FROM TempView_sales\")\r\n",
					""
				],
				"execution_count": 15
			}
		]
	}
}