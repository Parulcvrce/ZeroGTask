{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "07e9cf24-c042-42ad-83f5-1d800056cf60"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35c7c256-febc-4c53-82a5-71e8573a3c24/resourceGroups/rg-pmishra-training-001/providers/Microsoft.Synapse/workspaces/trainparmish/bigDataPools/Sparkpool",
				"name": "Sparkpool",
				"type": "Spark",
				"endpoint": "https://trainparmish.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"import requests"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"# Define the API endpoint URL \r\n",
					"api_url = \"https://bloomberg-market-and-financial-news.p.rapidapi.com/market/get-full?id=adsmi:ind,aex:ind,co1:com,gc1:com\"\r\n",
					"\r\n",
					"headers = {\r\n",
					"    \"X-RapidAPI-Key\": \"6f62420894msh3a93ea866bd5f7fp1d121ajsnd9f72be5ba73\",\r\n",
					"    \"X-RapidAPI-Host\": \"bloomberg-market-and-financial-news.p.rapidapi.com\"\r\n",
					"}\r\n",
					"\r\n",
					"response = requests.get(api_url, headers=headers)\r\n",
					"\r\n",
					"try:\r\n",
					"    # Check if the request was successful (status code 200)\r\n",
					"    if response.status_code == 200:\r\n",
					"       # Parse the JSON response  \r\n",
					"       data = response.json()\r\n",
					"\r\n",
					"       # Print the response data\r\n",
					"       print(\"Response Data:\")  \r\n",
					"    #    print(data)\r\n",
					"\r\n",
					"       df = pd.DataFrame(data)\r\n",
					"       print(df)\r\n",
					"\r\n",
					"       \r\n",
					"\r\n",
					"    else:\r\n",
					"       # Print the error status code\r\n",
					"       print(\"Error:\", response.status_code)\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    # Print any exceptions that occur\r\n",
					"    print(\"Error:\", e)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"\r\n",
					"def fetch_data(api_url):\r\n",
					"    data = []\r\n",
					"    cookies = None\r\n",
					"    \r\n",
					"    while True:\r\n",
					"        try:\r\n",
					"            # Send a GET request to the API endpoint\r\n",
					"            response = requests.get(api_url, cookies=cookies)\r\n",
					"\r\n",
					"            # Check if the request was successful (status code 200)\r\n",
					"            if response.status_code == 200:\r\n",
					"                # Parse the JSON response\r\n",
					"                json_data = response.json()\r\n",
					"                \r\n",
					"                # Append the data from the current page to the list\r\n",
					"                data.extend(json_data)\r\n",
					"\r\n",
					"                # Check if there are more pages available\r\n",
					"                if 'next_page' in response.cookies:\r\n",
					"                    # Update cookies for pagination\r\n",
					"                    cookies = {'session': response.cookies['session']}\r\n",
					"                    api_url = response.cookies['next_page']\r\n",
					"                else:\r\n",
					"                    # Break out of the loop if no more pages available\r\n",
					"                    break\r\n",
					"            else:\r\n",
					"                # If the request was not successful, print the error status code\r\n",
					"                print(\"Error:\", response.status_code)\r\n",
					"                break\r\n",
					"        except Exception as e:\r\n",
					"            # Print any exceptions that occur during the request\r\n",
					"            print(\"Error:\", e)\r\n",
					"            break\r\n",
					"    \r\n",
					"    return data\r\n",
					"\r\n",
					"# Example API endpoint URL\r\n",
					"# api_url = \"https://jsonplaceholder.typicode.com/posts?_page=10\"\r\n",
					"api_url = \"https://sentimentapi.p.rapidapi.com/products/api/extractsentiment\"\r\n",
					"\r\n",
					"\r\n",
					"# Call the function to fetch data from the API\r\n",
					"result = fetch_data(api_url)\r\n",
					"\r\n",
					"# Print the fetched data\r\n",
					"print(result)\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the API endpoint URL\r\n",
					"api_url = \"https://jsonplaceholder.typicode.com/posts\"\r\n",
					"#\"https://api.publicapis.org/entries\"\r\n",
					"\r\n",
					"\r\n",
					"try:\r\n",
					"    # Send a GET request to the API endpoint\r\n",
					"    response = requests.get(api_url)\r\n",
					"\r\n",
					"    # Check if the request was successful (status code 200)\r\n",
					"    if response.status_code == 200:\r\n",
					"        # Parse the JSON response\r\n",
					"        data = response.json()\r\n",
					"        \r\n",
					"        # Print the response data\r\n",
					"        print(\"Response Data:\")\r\n",
					"        print(data)\r\n",
					"    else:\r\n",
					"        # If the request was not successful, print the error status code\r\n",
					"        print(\"Error:\", response.status_code)\r\n",
					"except Exception as e:\r\n",
					"    # Print any exceptions that occur during the request\r\n",
					"    print(\"Error:\", e)\r\n",
					""
				]
			}
		]
	}
}